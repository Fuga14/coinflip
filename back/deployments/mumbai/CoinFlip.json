{
  "address": "0xB98bC22c38e8c84693ca3336e6C71Ba89078D522",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_VRFCoordinator",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "betAmount",
          "type": "uint256"
        }
      ],
      "name": "GameCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betAmount",
          "type": "uint256"
        }
      ],
      "name": "GameFinished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betAmount",
          "type": "uint256"
        }
      ],
      "name": "GameJoined",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "player1",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betAmount",
          "type": "uint256"
        }
      ],
      "name": "GameStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "RequestFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "numWords",
          "type": "uint32"
        }
      ],
      "name": "RequestSent",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MIN_BET",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROI",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateROI",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "callbackGasLimit",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "cancelGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_playerChoice",
          "type": "uint256"
        }
      ],
      "name": "createGame",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "createdGames",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "player1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "player2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "betAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "player1Choice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "player2Choice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isStarted",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isFinished",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isCanceled",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "winnerNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gameId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "gamesRequests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "getGame",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "gameId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "player1",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "player2",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "betAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "player1Choice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "player2Choice",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isStarted",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isFinished",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isCanceled",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "winner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "winnerNumber",
              "type": "uint256"
            }
          ],
          "internalType": "struct CoinFlip.Game",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "getGameByRequestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getKeyHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastRequiestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "getRequestStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "fulfilled",
          "type": "bool"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSubscriptionId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "joinGame",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keyHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRequestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numWords",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestConfirmations",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requestIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestRandomWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_requests",
      "outputs": [
        {
          "internalType": "bool",
          "name": "fulfilled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subscriptionId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7d37a758a3c06d7e636474b0d1d3440077334b089039454fd30f19d9832eb11a",
  "receipt": {
    "to": null,
    "from": "0x75afdcceB1317045FeA1b7f5b0F9cA63bAD5c984",
    "contractAddress": "0xB98bC22c38e8c84693ca3336e6C71Ba89078D522",
    "transactionIndex": 30,
    "gasUsed": "3365120",
    "logsBloom": "0x
    "blockHash": "0xa3a361fa66fdb06a069b694ea7b8505f3488aa2a534a578ee8772e2a86d7663b",
    "transactionHash": "0x7d37a758a3c06d7e636474b0d1d3440077334b089039454fd30f19d9832eb11a",
    "logs": [
      {
        "transactionIndex": 30,
        "blockNumber": 39281057,
        "transactionHash": "0x7d37a758a3c06d7e636474b0d1d3440077334b089039454fd30f19d9832eb11a",
        "address": "0xB98bC22c38e8c84693ca3336e6C71Ba89078D522",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000075afdcceb1317045fea1b7f5b0f9ca63bad5c984"
        ],
        "data": "0x",
        "logIndex": 124,
        "blockHash": "0xa3a361fa66fdb06a069b694ea7b8505f3488aa2a534a578ee8772e2a86d7663b"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 39281057,
        "transactionHash": "0x7d37a758a3c06d7e636474b0d1d3440077334b089039454fd30f19d9832eb11a",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000075afdcceb1317045fea1b7f5b0f9ca63bad5c984",
          "0x000000000000000000000000e7f13f6bc1e7f5ca4a6c9a255124ce22c46f8ef0"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000011b03c7f67a7000000000000000000000000000000000000000000000000001bded00ed42881b800000000000000000000000000000000000000000000002f8554f397bba8d1810000000000000000000000000000000000000000000000001bcd1fd254c0dab800000000000000000000000000000000000000000000002f8566a3d43b107881",
        "logIndex": 125,
        "blockHash": "0xa3a361fa66fdb06a069b694ea7b8505f3488aa2a534a578ee8772e2a86d7663b"
      }
    ],
    "blockNumber": 39281057,
    "cumulativeGasUsed": "7775362",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "5763",
    "0x7a1BaC17Ccc5b313516C5E16fb24f7659aA5ebed",
    "0x4b09e658ed251bcafeebbc69400383d49f344ace09b9576fe248bb02c003fe9f"
  ],
  "numDeployments": 5,
  "solcInputHash": "3505f1877f3100852f45acb079b6a466",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_VRFCoordinator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"}],\"name\":\"GameCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"}],\"name\":\"GameFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"}],\"name\":\"GameJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"}],\"name\":\"GameStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"}],\"name\":\"RequestSent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIN_BET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betAmount\",\"type\":\"uint256\"}],\"name\":\"calculateROI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callbackGasLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"cancelGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_playerChoice\",\"type\":\"uint256\"}],\"name\":\"createGame\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"createdGames\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"player1Choice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"player2Choice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isStarted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isFinished\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCanceled\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"winnerNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gamesRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"getGame\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"player1Choice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"player2Choice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isStarted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isFinished\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCanceled\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"winnerNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct CoinFlip.Game\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getGameByRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getKeyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastRequiestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getRequestStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSubscriptionId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"joinGame\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numWords\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestConfirmations\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestRandomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_requests\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"gamesRequests(uint256)\":{\"notice\":\"This is a mapping to track requests for a random numberto games Ids\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CoinFlip.sol\":\"CoinFlip\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/CoinFlip.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\n\\ncontract CoinFlip is Ownable, ReentrancyGuard, VRFConsumerBaseV2 {\\n    VRFCoordinatorV2Interface immutable COORDINATOR;\\n\\n    uint256 public gameId = 0;\\n    uint256 public constant ROI = 5;\\n    uint256 private roiBalance;\\n    uint64 public immutable subscriptionId;\\n    bytes32 public immutable keyHash;\\n    uint32 public constant numWords = 1;\\n    uint32 public constant callbackGasLimit = 500000; // 500,000 gas\\n    uint16 public constant requestConfirmations = 3;\\n    uint256 public constant MIN_BET = 100000000000000;\\n\\n    // past requests Id.\\n    uint256[] public requestIds;\\n    uint256 public lastRequestId;\\n\\n    struct Game {\\n        uint256 gameId;\\n        address player1;\\n        address player2;\\n        uint256 betAmount;\\n        uint256 player1Choice;\\n        uint256 player2Choice;\\n        bool isStarted;\\n        bool isFinished;\\n        bool isCanceled;\\n        address winner;\\n        uint256 winnerNumber;\\n    }\\n\\n    struct RequestStatus {\\n        bool fulfilled; // whether the request has been successfully fulfilled\\n        bool exists; // whether a requestId exists\\n        uint256[] randomWords;\\n    }\\n\\n    mapping(uint256 => Game) public createdGames;\\n    mapping(uint256 => RequestStatus) public s_requests;\\n\\n    /// @notice This is a mapping to track requests for a random number\\n    /// @notice to games Ids\\n    mapping(uint256 => uint256) public gamesRequests;\\n\\n    event GameStarted(uint256 indexed gameId, address indexed player1, uint256 indexed betAmount);\\n    event GameJoined(uint256 indexed gameId, address indexed player, uint256 indexed betAmount);\\n    event GameFinished(uint256 indexed gameId, address indexed winner, uint256 indexed betAmount);\\n    event GameCanceled(uint256 indexed gameId, address indexed creator, uint256 betAmount);\\n    event RequestSent(uint256 requestId, uint32 numWords);\\n    event RequestFulfilled(uint256 requestId, uint256[] randomWords);\\n\\n    constructor(\\n        uint64 _subscriptionId,\\n        address _VRFCoordinator,\\n        bytes32 _keyHash\\n    ) VRFConsumerBaseV2(_VRFCoordinator) {\\n        subscriptionId = _subscriptionId;\\n        COORDINATOR = VRFCoordinatorV2Interface(_VRFCoordinator);\\n        keyHash = _keyHash;\\n    }\\n\\n    function createGame(uint256 _playerChoice) external payable {\\n        require(address(msg.sender) != address(0), \\\"Address zero can not create a game!\\\");\\n        require(msg.value >= MIN_BET, \\\"Bet amount should be more or equal to minimum bet amount\\\");\\n        require(_playerChoice <= 1, \\\"Choice can only be 1 or 0\\\");\\n        Game memory game;\\n        game.betAmount = msg.value;\\n        game.player1 = msg.sender;\\n        game.gameId = gameId;\\n        game.player1Choice = _playerChoice;\\n        game.isStarted = true;\\n        createdGames[gameId] = game;\\n\\n        emit GameStarted(gameId, msg.sender, msg.value);\\n        gameId += 1;\\n    }\\n\\n    function joinGame(uint256 _gameId) external payable {\\n        Game memory game = createdGames[_gameId];\\n        require(address(msg.sender) != address(0), \\\"Invalid address!\\\");\\n        require(msg.value == game.betAmount, \\\"Need same amount to join the game!\\\");\\n        require(\\n            game.isStarted == true && game.isFinished == false && game.isCanceled == false,\\n            \\\"Cannot join the game!\\\"\\n        );\\n\\n        game.player2 = msg.sender;\\n        game.betAmount += msg.value;\\n        game.player2Choice = getPlayer2Choise(game.player1Choice);\\n\\n        uint256 requestId = requestRandomWords();\\n        gamesRequests[requestId] = game.gameId;\\n        createdGames[_gameId] = game;\\n\\n        emit GameJoined(game.gameId, msg.sender, msg.value);\\n    }\\n\\n    function cancelGame(uint256 _gameId) external nonReentrant {\\n        Game memory game = createdGames[_gameId];\\n        require(msg.sender == game.player1, \\\"Only creator of game can cancel\\\");\\n        require(game.isStarted == true && game.isFinished == false, \\\"Game is finished\\\");\\n        require(game.isCanceled == false, \\\"Game already canceled\\\");\\n        uint256 betAmount = game.betAmount;\\n        game.betAmount = 0;\\n        game.isCanceled = true;\\n        createdGames[_gameId] = game;\\n\\n        (bool success, ) = msg.sender.call{value: betAmount}(\\\"\\\");\\n        require(success, \\\"Cancel failed\\\");\\n        emit GameCanceled(_gameId, msg.sender, betAmount);\\n    }\\n\\n    function requestRandomWords() public returns (uint256 requestId) {\\n        // Will revert if subscription is not set and funded.\\n        requestId = COORDINATOR.requestRandomWords(\\n            keyHash,\\n            subscriptionId,\\n            requestConfirmations,\\n            callbackGasLimit,\\n            numWords\\n        );\\n        s_requests[requestId] = RequestStatus({\\n            randomWords: new uint256[](0),\\n            exists: true,\\n            fulfilled: false\\n        });\\n        requestIds.push(requestId);\\n        lastRequestId = requestId;\\n        emit RequestSent(requestId, numWords);\\n        return requestId;\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256 _requestId,\\n        uint256[] memory _randomWords\\n    ) internal override {\\n        require(s_requests[_requestId].exists, \\\"request not found\\\");\\n        s_requests[_requestId].fulfilled = true;\\n        s_requests[_requestId].randomWords = _randomWords;\\n        emit RequestFulfilled(_requestId, _randomWords);\\n\\n        uint256 currentGameId = gamesRequests[_requestId];\\n        Game memory game = createdGames[currentGameId];\\n\\n        uint256 randomValue = _randomWords[0];\\n        uint256 winnerNumber = getWinnerNumber(randomValue);\\n        address winnerAddress = getWinner(game.gameId, randomValue);\\n        uint256 roiFromGame = calculateROI(game.betAmount);\\n        uint256 userWinAmount = game.betAmount - roiFromGame;\\n\\n        game.winner = winnerAddress;\\n        game.isFinished = true;\\n        game.winnerNumber = winnerNumber;\\n        createdGames[currentGameId] = game;\\n\\n        (bool success, ) = winnerAddress.call{value: userWinAmount}(\\\"\\\");\\n        require(success, \\\"Winner prize transfer is failed\\\");\\n\\n        emit GameFinished(currentGameId, winnerAddress, game.betAmount);\\n\\n        roiBalance += roiFromGame;\\n    }\\n\\n    function getRequestStatus(\\n        uint256 _requestId\\n    ) external view returns (bool fulfilled, uint256[] memory randomWords) {\\n        require(s_requests[_requestId].exists, \\\"request not found\\\");\\n        RequestStatus memory request = s_requests[_requestId];\\n        return (request.fulfilled, request.randomWords);\\n    }\\n\\n    function getPlayer2Choise(uint256 _player1Choise) internal pure returns (uint256) {\\n        if (_player1Choise == 0) {\\n            return 1;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function getWinnerNumber(uint256 _requstedRandomNumber) internal pure returns (uint256) {\\n        return _requstedRandomNumber % 2;\\n    }\\n\\n    function getWinner(uint256 _gameId, uint256 _randomValue) internal view returns (address) {\\n        Game memory game = createdGames[_gameId];\\n        uint256 winnerNumber = getWinnerNumber(_randomValue);\\n        uint256 player1Choice = game.player1Choice;\\n        // uint256 player2Choice = game.player2Choice;\\n        if (winnerNumber == player1Choice) {\\n            return game.player1;\\n        } else {\\n            return game.player2;\\n        }\\n    }\\n\\n    function calculateROI(uint256 _betAmount) public pure returns (uint256) {\\n        return (_betAmount * ROI) / 100;\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        (bool success, ) = msg.sender.call{value: roiBalance}(\\\"\\\");\\n        require(success, \\\"ROI transfer failed\\\");\\n    }\\n\\n    function getSubscriptionId() public view onlyOwner returns (uint64) {\\n        return subscriptionId;\\n    }\\n\\n    function getKeyHash() public view onlyOwner returns (bytes32) {\\n        return keyHash;\\n    }\\n\\n    function getLastRequiestId() public view returns (uint256) {\\n        return lastRequestId;\\n    }\\n\\n    function getGame(uint256 _gameId) public view returns (Game memory) {\\n        return createdGames[_gameId];\\n    }\\n\\n    function getGameByRequestId(uint256 _requestId) public view returns (uint256) {\\n        return gamesRequests[_requestId];\\n    }\\n}\\n\",\"keccak256\":\"0x4dfab119f62276e70ade3b715b14d9db01bb118ccc331b18bef494cea7e9681b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61010060405260006002553480156200001757600080fd5b5060405162003e7338038062003e7383398181016040528101906200003d9190620002b1565b816200005e62000052620000fb60201b60201c565b6200010360201b60201c565b600180819055508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508267ffffffffffffffff1660c08167ffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508060e081815250505050506200030d565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600067ffffffffffffffff82169050919050565b620001eb81620001cc565b8114620001f757600080fd5b50565b6000815190506200020b81620001e0565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200023e8262000211565b9050919050565b620002508162000231565b81146200025c57600080fd5b50565b600081519050620002708162000245565b92915050565b6000819050919050565b6200028b8162000276565b81146200029757600080fd5b50565b600081519050620002ab8162000280565b92915050565b600080600060608486031215620002cd57620002cc620001c7565b5b6000620002dd86828701620001fa565b9350506020620002f0868287016200025f565b925050604062000303868287016200029a565b9150509250925092565b60805160a05160c05160e051613b096200036a600039600081816107ed01528181610c21015261170e0152600081816106f8015281816116aa015261172f015260006116d201526000818161071c01526107700152613b096000f3fe6080604052600436106101c25760003560e01c80638796ba8c116100f7578063d5c4315911610095578063e0c8628911610064578063e0c862891461065b578063efaa55a014610686578063f2fde38b146106a2578063fc2a88c3146106cb576101c2565b8063d5c431591461059c578063d7c81b55146105c7578063d8a4676f146105f2578063de3d9fb714610630576101c2565b8063a168fa89116100d1578063a168fa89146104af578063a2f77bcc146104ed578063ae9458471461052a578063b0fb162f14610571576101c2565b80638796ba8c1461040a5780638da5cb5b146104475780639a0c24bd14610472576101c2565b80636540742f11610164578063715018a61161013e578063715018a614610360578063778b14c7146103775780637ccfd7fc146103a2578063876e3466146103cd576101c2565b80636540742f146102cf57806369958ab9146102fa5780636d653a1c14610323576101c2565b8063331bf125116101a0578063331bf125146102465780633ccfd60b1461027157806348e837b91461028857806361728f39146102a4576101c2565b806309c1ba2e146101c75780631fe543e3146101f257806324f746971461021b575b600080fd5b3480156101d357600080fd5b506101dc6106f6565b6040516101e991906129b0565b60405180910390f35b3480156101fe57600080fd5b5061021960048036038101906102149190612b6e565b61071a565b005b34801561022757600080fd5b506102306107da565b60405161023d9190612be9565b60405180910390f35b34801561025257600080fd5b5061025b6107e1565b6040516102689190612c1d565b60405180910390f35b34801561027d57600080fd5b50610286610811565b005b6102a2600480360381019061029d9190612c38565b6108ca565b005b3480156102b057600080fd5b506102b9610c1f565b6040516102c69190612c1d565b60405180910390f35b3480156102db57600080fd5b506102e4610c43565b6040516102f19190612c74565b60405180910390f35b34801561030657600080fd5b50610321600480360381019061031c9190612c38565b610c4d565b005b34801561032f57600080fd5b5061034a60048036038101906103459190612c38565b6111ca565b6040516103579190612c74565b60405180910390f35b34801561036c57600080fd5b506103756111e2565b005b34801561038357600080fd5b5061038c6111f6565b6040516103999190612c74565b60405180910390f35b3480156103ae57600080fd5b506103b7611200565b6040516103c49190612be9565b60405180910390f35b3480156103d957600080fd5b506103f460048036038101906103ef9190612c38565b611205565b6040516104019190612c74565b60405180910390f35b34801561041657600080fd5b50610431600480360381019061042c9190612c38565b611227565b60405161043e9190612c74565b60405180910390f35b34801561045357600080fd5b5061045c61124b565b6040516104699190612cd0565b60405180910390f35b34801561047e57600080fd5b5061049960048036038101906104949190612c38565b611274565b6040516104a69190612c74565b60405180910390f35b3480156104bb57600080fd5b506104d660048036038101906104d19190612c38565b611291565b6040516104e4929190612d06565b60405180910390f35b3480156104f957600080fd5b50610514600480360381019061050f9190612c38565b6112cf565b6040516105219190612e3d565b60405180910390f35b34801561053657600080fd5b50610551600480360381019061054c9190612c38565b611482565b6040516105689b9a99989796959493929190612e59565b60405180910390f35b34801561057d57600080fd5b50610586611563565b6040516105939190612f21565b60405180910390f35b3480156105a857600080fd5b506105b1611568565b6040516105be9190612c74565b60405180910390f35b3480156105d357600080fd5b506105dc61156d565b6040516105e99190612c74565b60405180910390f35b3480156105fe57600080fd5b5061061960048036038101906106149190612c38565b611573565b604051610627929190612feb565b60405180910390f35b34801561063c57600080fd5b5061064561169e565b60405161065291906129b0565b60405180910390f35b34801561066757600080fd5b506106706116ce565b60405161067d9190612c74565b60405180910390f35b6106a0600480360381019061069b9190612c38565b611905565b005b3480156106ae57600080fd5b506106c960048036038101906106c49190613047565b611e34565b005b3480156106d757600080fd5b506106e0611eb7565b6040516106ed9190612c74565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107cc57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016107c3929190613074565b60405180910390fd5b6107d68282611ebd565b5050565b6207a12081565b60006107eb6124c7565b7f0000000000000000000000000000000000000000000000000000000000000000905090565b6108196124c7565b60003373ffffffffffffffffffffffffffffffffffffffff16600354604051610841906130ce565b60006040518083038185875af1925050503d806000811461087e576040519150601f19603f3d011682016040523d82523d6000602084013e610883565b606091505b50509050806108c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108be90613140565b60405180910390fd5b50565b600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603610939576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610930906131d2565b60405180910390fd5b655af3107a4000341015610982576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097990613264565b60405180910390fd5b60018111156109c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109bd906132d0565b60405180910390fd5b6109ce612881565b3481606001818152505033816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506002548160000181815250508181608001818152505060018160c0019015159081151581525050806006600060025481526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a0820151816005015560c08201518160060160006101000a81548160ff02191690831515021790555060e08201518160060160016101000a81548160ff0219169083151502179055506101008201518160060160026101000a81548160ff0219169083151502179055506101208201518160060160036101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101408201518160070155905050343373ffffffffffffffffffffffffffffffffffffffff166002547f0c82908456d66c43e9de63edd66f9faf875c8f3a12f936e162d675ec42c3544460405160405180910390a4600160026000828254610c14919061331f565b925050819055505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b655af3107a400081565b610c55612545565b60006006600083815260200190815260200160002060405180610160016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820154815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff161515151581526020016006820160019054906101000a900460ff161515151581526020016006820160029054906101000a900460ff161515151581526020016006820160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016007820154815250509050806020015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e669061339f565b60405180910390fd5b600115158160c001511515148015610e8f5750600015158160e001511515145b610ece576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec59061340b565b60405180910390fd5b60001515816101000151151514610f1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1190613477565b60405180910390fd5b600081606001519050600082606001818152505060018261010001901515908115158152505081600660008581526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a0820151816005015560c08201518160060160006101000a81548160ff02191690831515021790555060e08201518160060160016101000a81548160ff0219169083151502179055506101008201518160060160026101000a81548160ff0219169083151502179055506101208201518160060160036101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610140820151816007015590505060003373ffffffffffffffffffffffffffffffffffffffff16826040516110e7906130ce565b60006040518083038185875af1925050503d8060008114611124576040519150601f19603f3d011682016040523d82523d6000602084013e611129565b606091505b505090508061116d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611164906134e3565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16847fbf581002ffd83cf039584d649986e5832ccf29cf7386dd385540389df154f5de846040516111b49190612c74565b60405180910390a35050506111c7612594565b50565b60086020528060005260406000206000915090505481565b6111ea6124c7565b6111f4600061259d565b565b6000600554905090565b600181565b600060646005836112169190613503565b6112209190613574565b9050919050565b6004818154811061123757600080fd5b906000526020600020016000915090505481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060086000838152602001908152602001600020549050919050565b60076020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900460ff16905082565b6112d7612881565b6006600083815260200190815260200160002060405180610160016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820154815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff161515151581526020016006820160019054906101000a900460ff161515151581526020016006820160029054906101000a900460ff161515151581526020016006820160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016007820154815250509050919050565b60066020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040154908060050154908060060160009054906101000a900460ff16908060060160019054906101000a900460ff16908060060160029054906101000a900460ff16908060060160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806007015490508b565b600381565b600581565b60025481565b600060606007600084815260200190815260200160002060000160019054906101000a900460ff166115da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115d1906135f1565b60405180910390fd5b6000600760008581526020019081526020016000206040518060600160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900460ff161515151581526020016001820180548060200260200160405190810160405280929190818152602001828054801561167f57602002820191906000526020600020905b81548152602001906001019080831161166b575b5050505050815250509050806000015181604001519250925050915091565b60006116a86124c7565b7f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060036207a12060016040518663ffffffff1660e01b8152600401611776959493929190613611565b6020604051808303816000875af1158015611795573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b99190613679565b90506040518060600160405280600015158152602001600115158152602001600067ffffffffffffffff8111156117f3576117f2612a2b565b5b6040519080825280602002602001820160405280156118215781602001602082028036833780820191505090505b508152506007600083815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff0219169083151502179055506040820151816001019080519060200190611894929190612923565b509050506004819080600181540180825580915050600190039060005260206000200160009091909190915055806005819055507fcc58b13ad3eab50626c6a6300b1d139cd6ebb1688a7cced9461c2f7e762665ee8160016040516118fa9291906136a6565b60405180910390a190565b60006006600083815260200190815260200160002060405180610160016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820154815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff161515151581526020016006820160019054906101000a900460ff161515151581526020016006820160029054906101000a900460ff161515151581526020016006820160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016007820154815250509050600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603611b1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b139061371b565b60405180910390fd5b80606001513414611b62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b59906137ad565b60405180910390fd5b600115158160c001511515148015611b825750600015158160e001511515145b8015611b975750600015158161010001511515145b611bd6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bcd90613819565b60405180910390fd5b33816040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250503481606001818151611c20919061331f565b91508181525050611c348160800151612661565b8160a00181815250506000611c476116ce565b90508160000151600860008381526020019081526020016000208190555081600660008581526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a0820151816005015560c08201518160060160006101000a81548160ff02191690831515021790555060e08201518160060160016101000a81548160ff0219169083151502179055506101008201518160060160026101000a81548160ff0219169083151502179055506101208201518160060160036101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101408201518160070155905050343373ffffffffffffffffffffffffffffffffffffffff1683600001517f48bba6a72d4a9fae48e2469ce99518c38afec785fa4f3df38a1a76b03a97953760405160405180910390a4505050565b611e3c6124c7565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611eab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ea2906138ab565b60405180910390fd5b611eb48161259d565b50565b60055481565b6007600083815260200190815260200160002060000160019054906101000a900460ff16611f20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f17906135f1565b60405180910390fd5b60016007600084815260200190815260200160002060000160006101000a81548160ff02191690831515021790555080600760008481526020019081526020016000206001019080519060200190611f79929190612923565b507ffe2e2d779dba245964d4e3ef9b994be63856fd568bf7d3ca9e224755cb1bd54d8282604051611fab9291906138cb565b60405180910390a160006008600084815260200190815260200160002054905060006006600083815260200190815260200160002060405180610160016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820154815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff161515151581526020016006820160019054906101000a900460ff161515151581526020016006820160029054906101000a900460ff161515151581526020016006820160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016007820154815250509050600083600081518110612189576121886138fb565b5b60200260200101519050600061219e8261267d565b905060006121b0846000015184612693565b905060006121c18560600151611205565b905060008186606001516121d5919061392a565b90508286610120019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060018660e0019015159081151581525050838661014001818152505085600660008981526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a0820151816005015560c08201518160060160006101000a81548160ff02191690831515021790555060e08201518160060160016101000a81548160ff0219169083151502179055506101008201518160060160026101000a81548160ff0219169083151502179055506101208201518160060160036101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610140820151816007015590505060008373ffffffffffffffffffffffffffffffffffffffff16826040516123d3906130ce565b60006040518083038185875af1925050503d8060008114612410576040519150601f19603f3d011682016040523d82523d6000602084013e612415565b606091505b5050905080612459576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612450906139aa565b60405180910390fd5b86606001518473ffffffffffffffffffffffffffffffffffffffff16897ff5d92df6ae1a0b46d0a0c57c2e1da0d75d7591d2804ad086cb1e27ba67de7aaf60405160405180910390a482600360008282546124b4919061331f565b9250508190555050505050505050505050565b6124cf612879565b73ffffffffffffffffffffffffffffffffffffffff166124ed61124b565b73ffffffffffffffffffffffffffffffffffffffff1614612543576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161253a90613a16565b60405180910390fd5b565b60026001540361258a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161258190613a82565b60405180910390fd5b6002600181905550565b60018081905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008082036126735760019050612678565b600090505b919050565b600060028261268c9190613aa2565b9050919050565b6000806006600085815260200190815260200160002060405180610160016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820154815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff161515151581526020016006820160019054906101000a900460ff161515151581526020016006820160029054906101000a900460ff161515151581526020016006820160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600782015481525050905060006128478461267d565b90506000826080015190508082036128685782602001519350505050612873565b826040015193505050505b92915050565b600033905090565b60405180610160016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600015158152602001600015158152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b82805482825590600052602060002090810192821561295f579160200282015b8281111561295e578251825591602001919060010190612943565b5b50905061296c9190612970565b5090565b5b80821115612989576000816000905550600101612971565b5090565b600067ffffffffffffffff82169050919050565b6129aa8161298d565b82525050565b60006020820190506129c560008301846129a1565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6129f2816129df565b81146129fd57600080fd5b50565b600081359050612a0f816129e9565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612a6382612a1a565b810181811067ffffffffffffffff82111715612a8257612a81612a2b565b5b80604052505050565b6000612a956129cb565b9050612aa18282612a5a565b919050565b600067ffffffffffffffff821115612ac157612ac0612a2b565b5b602082029050602081019050919050565b600080fd5b6000612aea612ae584612aa6565b612a8b565b90508083825260208201905060208402830185811115612b0d57612b0c612ad2565b5b835b81811015612b365780612b228882612a00565b845260208401935050602081019050612b0f565b5050509392505050565b600082601f830112612b5557612b54612a15565b5b8135612b65848260208601612ad7565b91505092915050565b60008060408385031215612b8557612b846129d5565b5b6000612b9385828601612a00565b925050602083013567ffffffffffffffff811115612bb457612bb36129da565b5b612bc085828601612b40565b9150509250929050565b600063ffffffff82169050919050565b612be381612bca565b82525050565b6000602082019050612bfe6000830184612bda565b92915050565b6000819050919050565b612c1781612c04565b82525050565b6000602082019050612c326000830184612c0e565b92915050565b600060208284031215612c4e57612c4d6129d5565b5b6000612c5c84828501612a00565b91505092915050565b612c6e816129df565b82525050565b6000602082019050612c896000830184612c65565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612cba82612c8f565b9050919050565b612cca81612caf565b82525050565b6000602082019050612ce56000830184612cc1565b92915050565b60008115159050919050565b612d0081612ceb565b82525050565b6000604082019050612d1b6000830185612cf7565b612d286020830184612cf7565b9392505050565b612d38816129df565b82525050565b612d4781612caf565b82525050565b612d5681612ceb565b82525050565b61016082016000820151612d736000850182612d2f565b506020820151612d866020850182612d3e565b506040820151612d996040850182612d3e565b506060820151612dac6060850182612d2f565b506080820151612dbf6080850182612d2f565b5060a0820151612dd260a0850182612d2f565b5060c0820151612de560c0850182612d4d565b5060e0820151612df860e0850182612d4d565b50610100820151612e0d610100850182612d4d565b50610120820151612e22610120850182612d3e565b50610140820151612e37610140850182612d2f565b50505050565b600061016082019050612e536000830184612d5c565b92915050565b600061016082019050612e6f600083018e612c65565b612e7c602083018d612cc1565b612e89604083018c612cc1565b612e96606083018b612c65565b612ea3608083018a612c65565b612eb060a0830189612c65565b612ebd60c0830188612cf7565b612eca60e0830187612cf7565b612ed8610100830186612cf7565b612ee6610120830185612cc1565b612ef4610140830184612c65565b9c9b505050505050505050505050565b600061ffff82169050919050565b612f1b81612f04565b82525050565b6000602082019050612f366000830184612f12565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000612f748383612d2f565b60208301905092915050565b6000602082019050919050565b6000612f9882612f3c565b612fa28185612f47565b9350612fad83612f58565b8060005b83811015612fde578151612fc58882612f68565b9750612fd083612f80565b925050600181019050612fb1565b5085935050505092915050565b60006040820190506130006000830185612cf7565b81810360208301526130128184612f8d565b90509392505050565b61302481612caf565b811461302f57600080fd5b50565b6000813590506130418161301b565b92915050565b60006020828403121561305d5761305c6129d5565b5b600061306b84828501613032565b91505092915050565b60006040820190506130896000830185612cc1565b6130966020830184612cc1565b9392505050565b600081905092915050565b50565b60006130b860008361309d565b91506130c3826130a8565b600082019050919050565b60006130d9826130ab565b9150819050919050565b600082825260208201905092915050565b7f524f49207472616e73666572206661696c656400000000000000000000000000600082015250565b600061312a6013836130e3565b9150613135826130f4565b602082019050919050565b600060208201905081810360008301526131598161311d565b9050919050565b7f41646472657373207a65726f2063616e206e6f7420637265617465206120676160008201527f6d65210000000000000000000000000000000000000000000000000000000000602082015250565b60006131bc6023836130e3565b91506131c782613160565b604082019050919050565b600060208201905081810360008301526131eb816131af565b9050919050565b7f42657420616d6f756e742073686f756c64206265206d6f7265206f722065717560008201527f616c20746f206d696e696d756d2062657420616d6f756e740000000000000000602082015250565b600061324e6038836130e3565b9150613259826131f2565b604082019050919050565b6000602082019050818103600083015261327d81613241565b9050919050565b7f43686f6963652063616e206f6e6c792062652031206f72203000000000000000600082015250565b60006132ba6019836130e3565b91506132c582613284565b602082019050919050565b600060208201905081810360008301526132e9816132ad565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061332a826129df565b9150613335836129df565b925082820190508082111561334d5761334c6132f0565b5b92915050565b7f4f6e6c792063726561746f72206f662067616d652063616e2063616e63656c00600082015250565b6000613389601f836130e3565b915061339482613353565b602082019050919050565b600060208201905081810360008301526133b88161337c565b9050919050565b7f47616d652069732066696e697368656400000000000000000000000000000000600082015250565b60006133f56010836130e3565b9150613400826133bf565b602082019050919050565b60006020820190508181036000830152613424816133e8565b9050919050565b7f47616d6520616c72656164792063616e63656c65640000000000000000000000600082015250565b60006134616015836130e3565b915061346c8261342b565b602082019050919050565b6000602082019050818103600083015261349081613454565b9050919050565b7f43616e63656c206661696c656400000000000000000000000000000000000000600082015250565b60006134cd600d836130e3565b91506134d882613497565b602082019050919050565b600060208201905081810360008301526134fc816134c0565b9050919050565b600061350e826129df565b9150613519836129df565b9250828202613527816129df565b9150828204841483151761353e5761353d6132f0565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061357f826129df565b915061358a836129df565b92508261359a57613599613545565b5b828204905092915050565b7f72657175657374206e6f7420666f756e64000000000000000000000000000000600082015250565b60006135db6011836130e3565b91506135e6826135a5565b602082019050919050565b6000602082019050818103600083015261360a816135ce565b9050919050565b600060a0820190506136266000830188612c0e565b61363360208301876129a1565b6136406040830186612f12565b61364d6060830185612bda565b61365a6080830184612bda565b9695505050505050565b600081519050613673816129e9565b92915050565b60006020828403121561368f5761368e6129d5565b5b600061369d84828501613664565b91505092915050565b60006040820190506136bb6000830185612c65565b6136c86020830184612bda565b9392505050565b7f496e76616c696420616464726573732100000000000000000000000000000000600082015250565b60006137056010836130e3565b9150613710826136cf565b602082019050919050565b60006020820190508181036000830152613734816136f8565b9050919050565b7f4e6565642073616d6520616d6f756e7420746f206a6f696e207468652067616d60008201527f6521000000000000000000000000000000000000000000000000000000000000602082015250565b60006137976022836130e3565b91506137a28261373b565b604082019050919050565b600060208201905081810360008301526137c68161378a565b9050919050565b7f43616e6e6f74206a6f696e207468652067616d65210000000000000000000000600082015250565b60006138036015836130e3565b915061380e826137cd565b602082019050919050565b60006020820190508181036000830152613832816137f6565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006138956026836130e3565b91506138a082613839565b604082019050919050565b600060208201905081810360008301526138c481613888565b9050919050565b60006040820190506138e06000830185612c65565b81810360208301526138f28184612f8d565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000613935826129df565b9150613940836129df565b9250828203905081811115613958576139576132f0565b5b92915050565b7f57696e6e6572207072697a65207472616e73666572206973206661696c656400600082015250565b6000613994601f836130e3565b915061399f8261395e565b602082019050919050565b600060208201905081810360008301526139c381613987565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613a006020836130e3565b9150613a0b826139ca565b602082019050919050565b60006020820190508181036000830152613a2f816139f3565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000613a6c601f836130e3565b9150613a7782613a36565b602082019050919050565b60006020820190508181036000830152613a9b81613a5f565b9050919050565b6000613aad826129df565b9150613ab8836129df565b925082613ac857613ac7613545565b5b82820690509291505056fea2646970667358221220b6a63082ef66ab6ee6e50928a917d0a48466173ab8be27ee9b1ddb66a6579b4264736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106101c25760003560e01c80638796ba8c116100f7578063d5c4315911610095578063e0c8628911610064578063e0c862891461065b578063efaa55a014610686578063f2fde38b146106a2578063fc2a88c3146106cb576101c2565b8063d5c431591461059c578063d7c81b55146105c7578063d8a4676f146105f2578063de3d9fb714610630576101c2565b8063a168fa89116100d1578063a168fa89146104af578063a2f77bcc146104ed578063ae9458471461052a578063b0fb162f14610571576101c2565b80638796ba8c1461040a5780638da5cb5b146104475780639a0c24bd14610472576101c2565b80636540742f11610164578063715018a61161013e578063715018a614610360578063778b14c7146103775780637ccfd7fc146103a2578063876e3466146103cd576101c2565b80636540742f146102cf57806369958ab9146102fa5780636d653a1c14610323576101c2565b8063331bf125116101a0578063331bf125146102465780633ccfd60b1461027157806348e837b91461028857806361728f39146102a4576101c2565b806309c1ba2e146101c75780631fe543e3146101f257806324f746971461021b575b600080fd5b3480156101d357600080fd5b506101dc6106f6565b6040516101e991906129b0565b60405180910390f35b3480156101fe57600080fd5b5061021960048036038101906102149190612b6e565b61071a565b005b34801561022757600080fd5b506102306107da565b60405161023d9190612be9565b60405180910390f35b34801561025257600080fd5b5061025b6107e1565b6040516102689190612c1d565b60405180910390f35b34801561027d57600080fd5b50610286610811565b005b6102a2600480360381019061029d9190612c38565b6108ca565b005b3480156102b057600080fd5b506102b9610c1f565b6040516102c69190612c1d565b60405180910390f35b3480156102db57600080fd5b506102e4610c43565b6040516102f19190612c74565b60405180910390f35b34801561030657600080fd5b50610321600480360381019061031c9190612c38565b610c4d565b005b34801561032f57600080fd5b5061034a60048036038101906103459190612c38565b6111ca565b6040516103579190612c74565b60405180910390f35b34801561036c57600080fd5b506103756111e2565b005b34801561038357600080fd5b5061038c6111f6565b6040516103999190612c74565b60405180910390f35b3480156103ae57600080fd5b506103b7611200565b6040516103c49190612be9565b60405180910390f35b3480156103d957600080fd5b506103f460048036038101906103ef9190612c38565b611205565b6040516104019190612c74565b60405180910390f35b34801561041657600080fd5b50610431600480360381019061042c9190612c38565b611227565b60405161043e9190612c74565b60405180910390f35b34801561045357600080fd5b5061045c61124b565b6040516104699190612cd0565b60405180910390f35b34801561047e57600080fd5b5061049960048036038101906104949190612c38565b611274565b6040516104a69190612c74565b60405180910390f35b3480156104bb57600080fd5b506104d660048036038101906104d19190612c38565b611291565b6040516104e4929190612d06565b60405180910390f35b3480156104f957600080fd5b50610514600480360381019061050f9190612c38565b6112cf565b6040516105219190612e3d565b60405180910390f35b34801561053657600080fd5b50610551600480360381019061054c9190612c38565b611482565b6040516105689b9a99989796959493929190612e59565b60405180910390f35b34801561057d57600080fd5b50610586611563565b6040516105939190612f21565b60405180910390f35b3480156105a857600080fd5b506105b1611568565b6040516105be9190612c74565b60405180910390f35b3480156105d357600080fd5b506105dc61156d565b6040516105e99190612c74565b60405180910390f35b3480156105fe57600080fd5b5061061960048036038101906106149190612c38565b611573565b604051610627929190612feb565b60405180910390f35b34801561063c57600080fd5b5061064561169e565b60405161065291906129b0565b60405180910390f35b34801561066757600080fd5b506106706116ce565b60405161067d9190612c74565b60405180910390f35b6106a0600480360381019061069b9190612c38565b611905565b005b3480156106ae57600080fd5b506106c960048036038101906106c49190613047565b611e34565b005b3480156106d757600080fd5b506106e0611eb7565b6040516106ed9190612c74565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107cc57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016107c3929190613074565b60405180910390fd5b6107d68282611ebd565b5050565b6207a12081565b60006107eb6124c7565b7f0000000000000000000000000000000000000000000000000000000000000000905090565b6108196124c7565b60003373ffffffffffffffffffffffffffffffffffffffff16600354604051610841906130ce565b60006040518083038185875af1925050503d806000811461087e576040519150601f19603f3d011682016040523d82523d6000602084013e610883565b606091505b50509050806108c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108be90613140565b60405180910390fd5b50565b600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603610939576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610930906131d2565b60405180910390fd5b655af3107a4000341015610982576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097990613264565b60405180910390fd5b60018111156109c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109bd906132d0565b60405180910390fd5b6109ce612881565b3481606001818152505033816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506002548160000181815250508181608001818152505060018160c0019015159081151581525050806006600060025481526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a0820151816005015560c08201518160060160006101000a81548160ff02191690831515021790555060e08201518160060160016101000a81548160ff0219169083151502179055506101008201518160060160026101000a81548160ff0219169083151502179055506101208201518160060160036101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101408201518160070155905050343373ffffffffffffffffffffffffffffffffffffffff166002547f0c82908456d66c43e9de63edd66f9faf875c8f3a12f936e162d675ec42c3544460405160405180910390a4600160026000828254610c14919061331f565b925050819055505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b655af3107a400081565b610c55612545565b60006006600083815260200190815260200160002060405180610160016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820154815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff161515151581526020016006820160019054906101000a900460ff161515151581526020016006820160029054906101000a900460ff161515151581526020016006820160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016007820154815250509050806020015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e669061339f565b60405180910390fd5b600115158160c001511515148015610e8f5750600015158160e001511515145b610ece576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec59061340b565b60405180910390fd5b60001515816101000151151514610f1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1190613477565b60405180910390fd5b600081606001519050600082606001818152505060018261010001901515908115158152505081600660008581526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a0820151816005015560c08201518160060160006101000a81548160ff02191690831515021790555060e08201518160060160016101000a81548160ff0219169083151502179055506101008201518160060160026101000a81548160ff0219169083151502179055506101208201518160060160036101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610140820151816007015590505060003373ffffffffffffffffffffffffffffffffffffffff16826040516110e7906130ce565b60006040518083038185875af1925050503d8060008114611124576040519150601f19603f3d011682016040523d82523d6000602084013e611129565b606091505b505090508061116d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611164906134e3565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16847fbf581002ffd83cf039584d649986e5832ccf29cf7386dd385540389df154f5de846040516111b49190612c74565b60405180910390a35050506111c7612594565b50565b60086020528060005260406000206000915090505481565b6111ea6124c7565b6111f4600061259d565b565b6000600554905090565b600181565b600060646005836112169190613503565b6112209190613574565b9050919050565b6004818154811061123757600080fd5b906000526020600020016000915090505481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060086000838152602001908152602001600020549050919050565b60076020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900460ff16905082565b6112d7612881565b6006600083815260200190815260200160002060405180610160016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820154815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff161515151581526020016006820160019054906101000a900460ff161515151581526020016006820160029054906101000a900460ff161515151581526020016006820160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016007820154815250509050919050565b60066020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040154908060050154908060060160009054906101000a900460ff16908060060160019054906101000a900460ff16908060060160029054906101000a900460ff16908060060160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806007015490508b565b600381565b600581565b60025481565b600060606007600084815260200190815260200160002060000160019054906101000a900460ff166115da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115d1906135f1565b60405180910390fd5b6000600760008581526020019081526020016000206040518060600160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900460ff161515151581526020016001820180548060200260200160405190810160405280929190818152602001828054801561167f57602002820191906000526020600020905b81548152602001906001019080831161166b575b5050505050815250509050806000015181604001519250925050915091565b60006116a86124c7565b7f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060036207a12060016040518663ffffffff1660e01b8152600401611776959493929190613611565b6020604051808303816000875af1158015611795573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b99190613679565b90506040518060600160405280600015158152602001600115158152602001600067ffffffffffffffff8111156117f3576117f2612a2b565b5b6040519080825280602002602001820160405280156118215781602001602082028036833780820191505090505b508152506007600083815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff0219169083151502179055506040820151816001019080519060200190611894929190612923565b509050506004819080600181540180825580915050600190039060005260206000200160009091909190915055806005819055507fcc58b13ad3eab50626c6a6300b1d139cd6ebb1688a7cced9461c2f7e762665ee8160016040516118fa9291906136a6565b60405180910390a190565b60006006600083815260200190815260200160002060405180610160016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820154815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff161515151581526020016006820160019054906101000a900460ff161515151581526020016006820160029054906101000a900460ff161515151581526020016006820160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016007820154815250509050600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603611b1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b139061371b565b60405180910390fd5b80606001513414611b62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b59906137ad565b60405180910390fd5b600115158160c001511515148015611b825750600015158160e001511515145b8015611b975750600015158161010001511515145b611bd6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bcd90613819565b60405180910390fd5b33816040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250503481606001818151611c20919061331f565b91508181525050611c348160800151612661565b8160a00181815250506000611c476116ce565b90508160000151600860008381526020019081526020016000208190555081600660008581526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a0820151816005015560c08201518160060160006101000a81548160ff02191690831515021790555060e08201518160060160016101000a81548160ff0219169083151502179055506101008201518160060160026101000a81548160ff0219169083151502179055506101208201518160060160036101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101408201518160070155905050343373ffffffffffffffffffffffffffffffffffffffff1683600001517f48bba6a72d4a9fae48e2469ce99518c38afec785fa4f3df38a1a76b03a97953760405160405180910390a4505050565b611e3c6124c7565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611eab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ea2906138ab565b60405180910390fd5b611eb48161259d565b50565b60055481565b6007600083815260200190815260200160002060000160019054906101000a900460ff16611f20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f17906135f1565b60405180910390fd5b60016007600084815260200190815260200160002060000160006101000a81548160ff02191690831515021790555080600760008481526020019081526020016000206001019080519060200190611f79929190612923565b507ffe2e2d779dba245964d4e3ef9b994be63856fd568bf7d3ca9e224755cb1bd54d8282604051611fab9291906138cb565b60405180910390a160006008600084815260200190815260200160002054905060006006600083815260200190815260200160002060405180610160016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820154815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff161515151581526020016006820160019054906101000a900460ff161515151581526020016006820160029054906101000a900460ff161515151581526020016006820160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016007820154815250509050600083600081518110612189576121886138fb565b5b60200260200101519050600061219e8261267d565b905060006121b0846000015184612693565b905060006121c18560600151611205565b905060008186606001516121d5919061392a565b90508286610120019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060018660e0019015159081151581525050838661014001818152505085600660008981526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a0820151816005015560c08201518160060160006101000a81548160ff02191690831515021790555060e08201518160060160016101000a81548160ff0219169083151502179055506101008201518160060160026101000a81548160ff0219169083151502179055506101208201518160060160036101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610140820151816007015590505060008373ffffffffffffffffffffffffffffffffffffffff16826040516123d3906130ce565b60006040518083038185875af1925050503d8060008114612410576040519150601f19603f3d011682016040523d82523d6000602084013e612415565b606091505b5050905080612459576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612450906139aa565b60405180910390fd5b86606001518473ffffffffffffffffffffffffffffffffffffffff16897ff5d92df6ae1a0b46d0a0c57c2e1da0d75d7591d2804ad086cb1e27ba67de7aaf60405160405180910390a482600360008282546124b4919061331f565b9250508190555050505050505050505050565b6124cf612879565b73ffffffffffffffffffffffffffffffffffffffff166124ed61124b565b73ffffffffffffffffffffffffffffffffffffffff1614612543576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161253a90613a16565b60405180910390fd5b565b60026001540361258a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161258190613a82565b60405180910390fd5b6002600181905550565b60018081905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008082036126735760019050612678565b600090505b919050565b600060028261268c9190613aa2565b9050919050565b6000806006600085815260200190815260200160002060405180610160016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820154815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff161515151581526020016006820160019054906101000a900460ff161515151581526020016006820160029054906101000a900460ff161515151581526020016006820160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600782015481525050905060006128478461267d565b90506000826080015190508082036128685782602001519350505050612873565b826040015193505050505b92915050565b600033905090565b60405180610160016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600015158152602001600015158152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b82805482825590600052602060002090810192821561295f579160200282015b8281111561295e578251825591602001919060010190612943565b5b50905061296c9190612970565b5090565b5b80821115612989576000816000905550600101612971565b5090565b600067ffffffffffffffff82169050919050565b6129aa8161298d565b82525050565b60006020820190506129c560008301846129a1565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6129f2816129df565b81146129fd57600080fd5b50565b600081359050612a0f816129e9565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612a6382612a1a565b810181811067ffffffffffffffff82111715612a8257612a81612a2b565b5b80604052505050565b6000612a956129cb565b9050612aa18282612a5a565b919050565b600067ffffffffffffffff821115612ac157612ac0612a2b565b5b602082029050602081019050919050565b600080fd5b6000612aea612ae584612aa6565b612a8b565b90508083825260208201905060208402830185811115612b0d57612b0c612ad2565b5b835b81811015612b365780612b228882612a00565b845260208401935050602081019050612b0f565b5050509392505050565b600082601f830112612b5557612b54612a15565b5b8135612b65848260208601612ad7565b91505092915050565b60008060408385031215612b8557612b846129d5565b5b6000612b9385828601612a00565b925050602083013567ffffffffffffffff811115612bb457612bb36129da565b5b612bc085828601612b40565b9150509250929050565b600063ffffffff82169050919050565b612be381612bca565b82525050565b6000602082019050612bfe6000830184612bda565b92915050565b6000819050919050565b612c1781612c04565b82525050565b6000602082019050612c326000830184612c0e565b92915050565b600060208284031215612c4e57612c4d6129d5565b5b6000612c5c84828501612a00565b91505092915050565b612c6e816129df565b82525050565b6000602082019050612c896000830184612c65565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612cba82612c8f565b9050919050565b612cca81612caf565b82525050565b6000602082019050612ce56000830184612cc1565b92915050565b60008115159050919050565b612d0081612ceb565b82525050565b6000604082019050612d1b6000830185612cf7565b612d286020830184612cf7565b9392505050565b612d38816129df565b82525050565b612d4781612caf565b82525050565b612d5681612ceb565b82525050565b61016082016000820151612d736000850182612d2f565b506020820151612d866020850182612d3e565b506040820151612d996040850182612d3e565b506060820151612dac6060850182612d2f565b506080820151612dbf6080850182612d2f565b5060a0820151612dd260a0850182612d2f565b5060c0820151612de560c0850182612d4d565b5060e0820151612df860e0850182612d4d565b50610100820151612e0d610100850182612d4d565b50610120820151612e22610120850182612d3e565b50610140820151612e37610140850182612d2f565b50505050565b600061016082019050612e536000830184612d5c565b92915050565b600061016082019050612e6f600083018e612c65565b612e7c602083018d612cc1565b612e89604083018c612cc1565b612e96606083018b612c65565b612ea3608083018a612c65565b612eb060a0830189612c65565b612ebd60c0830188612cf7565b612eca60e0830187612cf7565b612ed8610100830186612cf7565b612ee6610120830185612cc1565b612ef4610140830184612c65565b9c9b505050505050505050505050565b600061ffff82169050919050565b612f1b81612f04565b82525050565b6000602082019050612f366000830184612f12565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000612f748383612d2f565b60208301905092915050565b6000602082019050919050565b6000612f9882612f3c565b612fa28185612f47565b9350612fad83612f58565b8060005b83811015612fde578151612fc58882612f68565b9750612fd083612f80565b925050600181019050612fb1565b5085935050505092915050565b60006040820190506130006000830185612cf7565b81810360208301526130128184612f8d565b90509392505050565b61302481612caf565b811461302f57600080fd5b50565b6000813590506130418161301b565b92915050565b60006020828403121561305d5761305c6129d5565b5b600061306b84828501613032565b91505092915050565b60006040820190506130896000830185612cc1565b6130966020830184612cc1565b9392505050565b600081905092915050565b50565b60006130b860008361309d565b91506130c3826130a8565b600082019050919050565b60006130d9826130ab565b9150819050919050565b600082825260208201905092915050565b7f524f49207472616e73666572206661696c656400000000000000000000000000600082015250565b600061312a6013836130e3565b9150613135826130f4565b602082019050919050565b600060208201905081810360008301526131598161311d565b9050919050565b7f41646472657373207a65726f2063616e206e6f7420637265617465206120676160008201527f6d65210000000000000000000000000000000000000000000000000000000000602082015250565b60006131bc6023836130e3565b91506131c782613160565b604082019050919050565b600060208201905081810360008301526131eb816131af565b9050919050565b7f42657420616d6f756e742073686f756c64206265206d6f7265206f722065717560008201527f616c20746f206d696e696d756d2062657420616d6f756e740000000000000000602082015250565b600061324e6038836130e3565b9150613259826131f2565b604082019050919050565b6000602082019050818103600083015261327d81613241565b9050919050565b7f43686f6963652063616e206f6e6c792062652031206f72203000000000000000600082015250565b60006132ba6019836130e3565b91506132c582613284565b602082019050919050565b600060208201905081810360008301526132e9816132ad565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061332a826129df565b9150613335836129df565b925082820190508082111561334d5761334c6132f0565b5b92915050565b7f4f6e6c792063726561746f72206f662067616d652063616e2063616e63656c00600082015250565b6000613389601f836130e3565b915061339482613353565b602082019050919050565b600060208201905081810360008301526133b88161337c565b9050919050565b7f47616d652069732066696e697368656400000000000000000000000000000000600082015250565b60006133f56010836130e3565b9150613400826133bf565b602082019050919050565b60006020820190508181036000830152613424816133e8565b9050919050565b7f47616d6520616c72656164792063616e63656c65640000000000000000000000600082015250565b60006134616015836130e3565b915061346c8261342b565b602082019050919050565b6000602082019050818103600083015261349081613454565b9050919050565b7f43616e63656c206661696c656400000000000000000000000000000000000000600082015250565b60006134cd600d836130e3565b91506134d882613497565b602082019050919050565b600060208201905081810360008301526134fc816134c0565b9050919050565b600061350e826129df565b9150613519836129df565b9250828202613527816129df565b9150828204841483151761353e5761353d6132f0565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061357f826129df565b915061358a836129df565b92508261359a57613599613545565b5b828204905092915050565b7f72657175657374206e6f7420666f756e64000000000000000000000000000000600082015250565b60006135db6011836130e3565b91506135e6826135a5565b602082019050919050565b6000602082019050818103600083015261360a816135ce565b9050919050565b600060a0820190506136266000830188612c0e565b61363360208301876129a1565b6136406040830186612f12565b61364d6060830185612bda565b61365a6080830184612bda565b9695505050505050565b600081519050613673816129e9565b92915050565b60006020828403121561368f5761368e6129d5565b5b600061369d84828501613664565b91505092915050565b60006040820190506136bb6000830185612c65565b6136c86020830184612bda565b9392505050565b7f496e76616c696420616464726573732100000000000000000000000000000000600082015250565b60006137056010836130e3565b9150613710826136cf565b602082019050919050565b60006020820190508181036000830152613734816136f8565b9050919050565b7f4e6565642073616d6520616d6f756e7420746f206a6f696e207468652067616d60008201527f6521000000000000000000000000000000000000000000000000000000000000602082015250565b60006137976022836130e3565b91506137a28261373b565b604082019050919050565b600060208201905081810360008301526137c68161378a565b9050919050565b7f43616e6e6f74206a6f696e207468652067616d65210000000000000000000000600082015250565b60006138036015836130e3565b915061380e826137cd565b602082019050919050565b60006020820190508181036000830152613832816137f6565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006138956026836130e3565b91506138a082613839565b604082019050919050565b600060208201905081810360008301526138c481613888565b9050919050565b60006040820190506138e06000830185612c65565b81810360208301526138f28184612f8d565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000613935826129df565b9150613940836129df565b9250828203905081811115613958576139576132f0565b5b92915050565b7f57696e6e6572207072697a65207472616e73666572206973206661696c656400600082015250565b6000613994601f836130e3565b915061399f8261395e565b602082019050919050565b600060208201905081810360008301526139c381613987565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613a006020836130e3565b9150613a0b826139ca565b602082019050919050565b60006020820190508181036000830152613a2f816139f3565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000613a6c601f836130e3565b9150613a7782613a36565b602082019050919050565b60006020820190508181036000830152613a9b81613a5f565b9050919050565b6000613aad826129df565b9150613ab8836129df565b925082613ac857613ac7613545565b5b82820690509291505056fea2646970667358221220b6a63082ef66ab6ee6e50928a917d0a48466173ab8be27ee9b1ddb66a6579b4264736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "gamesRequests(uint256)": {
        "notice": "This is a mapping to track requests for a random numberto games Ids"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 161,
        "contract": "contracts/CoinFlip.sol:CoinFlip",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 277,
        "contract": "contracts/CoinFlip.sol:CoinFlip",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 371,
        "contract": "contracts/CoinFlip.sol:CoinFlip",
        "label": "gameId",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 376,
        "contract": "contracts/CoinFlip.sol:CoinFlip",
        "label": "roiBalance",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 395,
        "contract": "contracts/CoinFlip.sol:CoinFlip",
        "label": "requestIds",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 397,
        "contract": "contracts/CoinFlip.sol:CoinFlip",
        "label": "lastRequestId",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 433,
        "contract": "contracts/CoinFlip.sol:CoinFlip",
        "label": "createdGames",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(Game)420_storage)"
      },
      {
        "astId": 438,
        "contract": "contracts/CoinFlip.sol:CoinFlip",
        "label": "s_requests",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(RequestStatus)428_storage)"
      },
      {
        "astId": 443,
        "contract": "contracts/CoinFlip.sol:CoinFlip",
        "label": "gamesRequests",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(Game)420_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CoinFlip.Game)",
        "numberOfBytes": "32",
        "value": "t_struct(Game)420_storage"
      },
      "t_mapping(t_uint256,t_struct(RequestStatus)428_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CoinFlip.RequestStatus)",
        "numberOfBytes": "32",
        "value": "t_struct(RequestStatus)428_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Game)420_storage": {
        "encoding": "inplace",
        "label": "struct CoinFlip.Game",
        "members": [
          {
            "astId": 399,
            "contract": "contracts/CoinFlip.sol:CoinFlip",
            "label": "gameId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 401,
            "contract": "contracts/CoinFlip.sol:CoinFlip",
            "label": "player1",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 403,
            "contract": "contracts/CoinFlip.sol:CoinFlip",
            "label": "player2",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 405,
            "contract": "contracts/CoinFlip.sol:CoinFlip",
            "label": "betAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 407,
            "contract": "contracts/CoinFlip.sol:CoinFlip",
            "label": "player1Choice",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 409,
            "contract": "contracts/CoinFlip.sol:CoinFlip",
            "label": "player2Choice",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 411,
            "contract": "contracts/CoinFlip.sol:CoinFlip",
            "label": "isStarted",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 413,
            "contract": "contracts/CoinFlip.sol:CoinFlip",
            "label": "isFinished",
            "offset": 1,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 415,
            "contract": "contracts/CoinFlip.sol:CoinFlip",
            "label": "isCanceled",
            "offset": 2,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 417,
            "contract": "contracts/CoinFlip.sol:CoinFlip",
            "label": "winner",
            "offset": 3,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 419,
            "contract": "contracts/CoinFlip.sol:CoinFlip",
            "label": "winnerNumber",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(RequestStatus)428_storage": {
        "encoding": "inplace",
        "label": "struct CoinFlip.RequestStatus",
        "members": [
          {
            "astId": 422,
            "contract": "contracts/CoinFlip.sol:CoinFlip",
            "label": "fulfilled",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 424,
            "contract": "contracts/CoinFlip.sol:CoinFlip",
            "label": "exists",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 427,
            "contract": "contracts/CoinFlip.sol:CoinFlip",
            "label": "randomWords",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}