{
  "address": "0xDfc5fb9B241AfbE10fCc0367B6b34Bc05AB783Cc",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_VRFCoordinator",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betAmount",
          "type": "uint256"
        }
      ],
      "name": "GameFinished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betAmount",
          "type": "uint256"
        }
      ],
      "name": "GameJoined",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "player1",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betAmount",
          "type": "uint256"
        }
      ],
      "name": "GameStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "RequestFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "numWords",
          "type": "uint32"
        }
      ],
      "name": "RequestSent",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MIN_BET",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROI",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateROI",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "callbackGasLimit",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_playerChoice",
          "type": "uint256"
        }
      ],
      "name": "createGame",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "createdGames",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "player1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "player2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "betAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "player1Choice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "player2Choice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isStarted",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isFinished",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gameId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "gamesRequests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "getGame",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "gameId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "player1",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "player2",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "betAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "player1Choice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "player2Choice",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isStarted",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isFinished",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "winner",
              "type": "address"
            }
          ],
          "internalType": "struct CoinFlip.Game",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "getGameByRequestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getKeyHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastRequiestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "getRequestStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "fulfilled",
          "type": "bool"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSubscriptionId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "joinGame",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keyHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRequestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numWords",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestConfirmations",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requestIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestRandomWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_requests",
      "outputs": [
        {
          "internalType": "bool",
          "name": "fulfilled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subscriptionId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x944e999fee873768d90a7f993d2e6657235c83b46fa9e75eab11509b055afaf9",
  "receipt": {
    "to": null,
    "from": "0x75afdcceB1317045FeA1b7f5b0F9cA63bAD5c984",
    "contractAddress": "0xDfc5fb9B241AfbE10fCc0367B6b34Bc05AB783Cc",
    "transactionIndex": 74,
    "gasUsed": "2822937",
    "logsBloom": "0x
    "blockHash": "0x7d6afc6eb79b588ac7f6769ad5a06655ba338b4c28da3b39fd7154a959afeb69",
    "transactionHash": "0x944e999fee873768d90a7f993d2e6657235c83b46fa9e75eab11509b055afaf9",
    "logs": [
      {
        "transactionIndex": 74,
        "blockNumber": 4133120,
        "transactionHash": "0x944e999fee873768d90a7f993d2e6657235c83b46fa9e75eab11509b055afaf9",
        "address": "0xDfc5fb9B241AfbE10fCc0367B6b34Bc05AB783Cc",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000075afdcceb1317045fea1b7f5b0f9ca63bad5c984"
        ],
        "data": "0x",
        "logIndex": 113,
        "blockHash": "0x7d6afc6eb79b588ac7f6769ad5a06655ba338b4c28da3b39fd7154a959afeb69"
      }
    ],
    "blockNumber": 4133120,
    "cumulativeGasUsed": "17355962",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "4674",
    "0x8103b0a8a00be2ddc778e6e7eaa21791cd364625",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c"
  ],
  "numDeployments": 4,
  "solcInputHash": "dd929912c3729c13d97df919ceeee4a9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_VRFCoordinator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"}],\"name\":\"GameFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"}],\"name\":\"GameJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"}],\"name\":\"GameStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"}],\"name\":\"RequestSent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIN_BET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betAmount\",\"type\":\"uint256\"}],\"name\":\"calculateROI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callbackGasLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_playerChoice\",\"type\":\"uint256\"}],\"name\":\"createGame\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"createdGames\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"player1Choice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"player2Choice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isStarted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isFinished\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gamesRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"getGame\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"player1Choice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"player2Choice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isStarted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isFinished\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"internalType\":\"struct CoinFlip.Game\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getGameByRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getKeyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastRequiestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getRequestStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSubscriptionId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"joinGame\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numWords\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestConfirmations\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestRandomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_requests\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"gamesRequests(uint256)\":{\"notice\":\"This is a mapping to track requests for a random numberto games Ids\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CoinFlip.sol\":\"CoinFlip\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/CoinFlip.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\n\\ncontract CoinFlip is Ownable, ReentrancyGuard, VRFConsumerBaseV2 {\\n    VRFCoordinatorV2Interface immutable COORDINATOR;\\n\\n    uint256 public gameId = 0;\\n    uint256 public constant ROI = 5;\\n    uint256 private roiBalance;\\n    uint64 public immutable subscriptionId;\\n    bytes32 public immutable keyHash;\\n    uint32 public constant numWords = 1;\\n    uint32 public constant callbackGasLimit = 500000; // 500,000 gas\\n    uint16 public constant requestConfirmations = 3;\\n    uint256 public constant MIN_BET = 100000000000000;\\n\\n    // past requests Id.\\n    uint256[] public requestIds;\\n    uint256 public lastRequestId;\\n\\n    struct Game {\\n        uint256 gameId;\\n        address player1;\\n        address player2;\\n        uint256 betAmount;\\n        uint256 player1Choice;\\n        uint256 player2Choice;\\n        bool isStarted;\\n        bool isFinished;\\n        address winner;\\n    }\\n\\n    struct RequestStatus {\\n        bool fulfilled; // whether the request has been successfully fulfilled\\n        bool exists; // whether a requestId exists\\n        uint256[] randomWords;\\n    }\\n\\n    mapping(uint256 => Game) public createdGames;\\n    mapping(uint256 => RequestStatus) public s_requests;\\n\\n    /// @notice This is a mapping to track requests for a random number\\n    /// @notice to games Ids\\n    mapping(uint256 => uint256) public gamesRequests;\\n\\n    event GameStarted(uint256 indexed gameId, address indexed player1, uint256 indexed betAmount);\\n    event GameJoined(uint256 indexed gameId, address indexed player, uint256 indexed betAmount);\\n    event GameFinished(uint256 indexed gameId, address indexed winner, uint256 indexed betAmount);\\n    event RequestSent(uint256 requestId, uint32 numWords);\\n    event RequestFulfilled(uint256 requestId, uint256[] randomWords);\\n\\n    constructor(\\n        uint64 _subscriptionId,\\n        address _VRFCoordinator,\\n        bytes32 _keyHash\\n    ) VRFConsumerBaseV2(_VRFCoordinator) {\\n        subscriptionId = _subscriptionId;\\n        COORDINATOR = VRFCoordinatorV2Interface(_VRFCoordinator);\\n        keyHash = _keyHash;\\n    }\\n\\n    function createGame(uint256 _playerChoice) public payable {\\n        require(address(msg.sender) != address(0), \\\"Address zero can not create a game!\\\");\\n        require(msg.value >= MIN_BET, \\\"Bet amount should be more or equal to minimum bet amount\\\");\\n        require(_playerChoice <= 1, \\\"Choice can only be 1 or 0\\\");\\n\\n        Game memory game;\\n\\n        game.betAmount = msg.value;\\n        game.player1 = msg.sender;\\n        game.gameId = gameId;\\n        game.player1Choice = _playerChoice;\\n        game.isStarted = true;\\n\\n        createdGames[gameId] = game;\\n\\n        emit GameStarted(gameId, msg.sender, msg.value);\\n\\n        gameId += 1;\\n    }\\n\\n    function joinGame(uint256 _gameId) public payable {\\n        Game memory game = createdGames[_gameId];\\n        require(address(msg.sender) != address(0), \\\"Invalid address!\\\");\\n        require(msg.value == game.betAmount, \\\"Need same amount to join the game!\\\");\\n        require(game.isStarted == true && game.isFinished == false, \\\"Cannot join the game!\\\");\\n\\n        game.player2 = msg.sender;\\n        game.betAmount += msg.value;\\n        game.player2Choice = getPlayer2Choise(game.player1Choice);\\n\\n        uint256 requestId = requestRandomWords();\\n        gamesRequests[requestId] = game.gameId;\\n        createdGames[_gameId] = game;\\n\\n        emit GameJoined(game.gameId, msg.sender, msg.value);\\n    }\\n\\n    function requestRandomWords() public returns (uint256 requestId) {\\n        // Will revert if subscription is not set and funded.\\n        requestId = COORDINATOR.requestRandomWords(\\n            keyHash,\\n            subscriptionId,\\n            requestConfirmations,\\n            callbackGasLimit,\\n            numWords\\n        );\\n        s_requests[requestId] = RequestStatus({\\n            randomWords: new uint256[](0),\\n            exists: true,\\n            fulfilled: false\\n        });\\n        requestIds.push(requestId);\\n        lastRequestId = requestId;\\n        emit RequestSent(requestId, numWords);\\n        return requestId;\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256 _requestId,\\n        uint256[] memory _randomWords\\n    ) internal override {\\n        require(s_requests[_requestId].exists, \\\"request not found\\\");\\n        s_requests[_requestId].fulfilled = true;\\n        s_requests[_requestId].randomWords = _randomWords;\\n        emit RequestFulfilled(_requestId, _randomWords);\\n\\n        uint256 currentGameId = gamesRequests[_requestId];\\n        Game memory game = createdGames[currentGameId];\\n\\n        uint256 randomValue = _randomWords[0];\\n        address winnerAddress = getWinner(game.gameId, randomValue);\\n        game.winner = winnerAddress;\\n\\n        uint256 roiFromGame = calculateROI(game.betAmount);\\n        uint256 userWinAmount = game.betAmount - roiFromGame;\\n\\n        game.isFinished = true;\\n        createdGames[currentGameId] = game;\\n\\n        (bool success, ) = winnerAddress.call{value: userWinAmount}(\\\"\\\");\\n        require(success, \\\"Winner prize transfer is failed\\\");\\n\\n        emit GameFinished(currentGameId, winnerAddress, game.betAmount);\\n\\n        roiBalance += roiFromGame;\\n    }\\n\\n    function getRequestStatus(\\n        uint256 _requestId\\n    ) external view returns (bool fulfilled, uint256[] memory randomWords) {\\n        require(s_requests[_requestId].exists, \\\"request not found\\\");\\n        RequestStatus memory request = s_requests[_requestId];\\n        return (request.fulfilled, request.randomWords);\\n    }\\n\\n    function getPlayer2Choise(uint256 _player1Choise) internal pure returns (uint256) {\\n        if (_player1Choise == 0) {\\n            return 1;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function getWinnerNumber(uint256 _requstedRandomNumber) internal pure returns (uint256) {\\n        return _requstedRandomNumber % 2;\\n    }\\n\\n    function getWinner(uint256 _gameId, uint256 _randomValue) internal view returns (address) {\\n        Game memory game = createdGames[_gameId];\\n        uint256 winnerNumber = getWinnerNumber(_randomValue);\\n        uint256 player1Choice = game.player1Choice;\\n        // uint256 player2Choice = game.player2Choice;\\n        if (winnerNumber == player1Choice) {\\n            return game.player1;\\n        } else {\\n            return game.player2;\\n        }\\n    }\\n\\n    function calculateROI(uint256 _betAmount) public pure returns (uint256) {\\n        return (_betAmount * ROI) / 100;\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        (bool success, ) = msg.sender.call{value: roiBalance}(\\\"\\\");\\n        require(success, \\\"ROI transfer failed\\\");\\n    }\\n\\n    function getSubscriptionId() public view onlyOwner returns (uint64) {\\n        return subscriptionId;\\n    }\\n\\n    function getKeyHash() public view onlyOwner returns (bytes32) {\\n        return keyHash;\\n    }\\n\\n    function getLastRequiestId() public view returns (uint256) {\\n        return lastRequestId;\\n    }\\n\\n    function getGame(uint256 _gameId) public view returns (Game memory) {\\n        return createdGames[_gameId];\\n    }\\n\\n    function getGameByRequestId(uint256 _requestId) public view returns (uint256) {\\n        return gamesRequests[_requestId];\\n    }\\n}\\n\",\"keccak256\":\"0xe091ba03d4151addef50d7b882e6940259d74296027c4203068a4e1e7daa0bf2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61010060405260006002553480156200001757600080fd5b50604051620034953803806200349583398181016040528101906200003d9190620002b1565b816200005e62000052620000fb60201b60201c565b6200010360201b60201c565b600180819055508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508267ffffffffffffffff1660c08167ffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508060e081815250505050506200030d565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600067ffffffffffffffff82169050919050565b620001eb81620001cc565b8114620001f757600080fd5b50565b6000815190506200020b81620001e0565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200023e8262000211565b9050919050565b620002508162000231565b81146200025c57600080fd5b50565b600081519050620002708162000245565b92915050565b6000819050919050565b6200028b8162000276565b81146200029757600080fd5b50565b600081519050620002ab8162000280565b92915050565b600080600060608486031215620002cd57620002cc620001c7565b5b6000620002dd86828701620001fa565b9350506020620002f0868287016200025f565b925050604062000303868287016200029a565b9150509250925092565b60805160a05160c05160e05161312b6200036a600039600081816107b701528181610bbf01526110f10152600081816106c20152818161108d0152611112015260006110b50152600081816106e6015261073a015261312b6000f3fe6080604052600436106101b75760003560e01c80638da5cb5b116100ec578063d7c81b551161008a578063e0c8628911610064578063e0c8628914610625578063efaa55a014610650578063f2fde38b1461066c578063fc2a88c314610695576101b7565b8063d7c81b5514610591578063d8a4676f146105bc578063de3d9fb7146105fa576101b7565b8063a2f77bcc116100c6578063a2f77bcc146104b9578063ae945847146104f6578063b0fb162f1461053b578063d5c4315914610566576101b7565b80638da5cb5b146104135780639a0c24bd1461043e578063a168fa891461047b576101b7565b80636540742f11610159578063778b14c711610133578063778b14c7146103435780637ccfd7fc1461036e578063876e3466146103995780638796ba8c146103d6576101b7565b80636540742f146102c45780636d653a1c146102ef578063715018a61461032c576101b7565b8063331bf12511610195578063331bf1251461023b5780633ccfd60b1461026657806348e837b91461027d57806361728f3914610299576101b7565b806309c1ba2e146101bc5780631fe543e3146101e757806324f7469714610210575b600080fd5b3480156101c857600080fd5b506101d16106c0565b6040516101de9190612236565b60405180910390f35b3480156101f357600080fd5b5061020e600480360381019061020991906123f4565b6106e4565b005b34801561021c57600080fd5b506102256107a4565b604051610232919061246f565b60405180910390f35b34801561024757600080fd5b506102506107ab565b60405161025d91906124a3565b60405180910390f35b34801561027257600080fd5b5061027b6107db565b005b610297600480360381019061029291906124be565b610894565b005b3480156102a557600080fd5b506102ae610bbd565b6040516102bb91906124a3565b60405180910390f35b3480156102d057600080fd5b506102d9610be1565b6040516102e691906124fa565b60405180910390f35b3480156102fb57600080fd5b50610316600480360381019061031191906124be565b610beb565b60405161032391906124fa565b60405180910390f35b34801561033857600080fd5b50610341610c03565b005b34801561034f57600080fd5b50610358610c17565b60405161036591906124fa565b60405180910390f35b34801561037a57600080fd5b50610383610c21565b604051610390919061246f565b60405180910390f35b3480156103a557600080fd5b506103c060048036038101906103bb91906124be565b610c26565b6040516103cd91906124fa565b60405180910390f35b3480156103e257600080fd5b506103fd60048036038101906103f891906124be565b610c48565b60405161040a91906124fa565b60405180910390f35b34801561041f57600080fd5b50610428610c6c565b6040516104359190612556565b60405180910390f35b34801561044a57600080fd5b50610465600480360381019061046091906124be565b610c95565b60405161047291906124fa565b60405180910390f35b34801561048757600080fd5b506104a2600480360381019061049d91906124be565b610cb2565b6040516104b092919061258c565b60405180910390f35b3480156104c557600080fd5b506104e060048036038101906104db91906124be565b610cf0565b6040516104ed9190612699565b60405180910390f35b34801561050257600080fd5b5061051d600480360381019061051891906124be565b610e7e565b604051610532999897969594939291906126b5565b60405180910390f35b34801561054757600080fd5b50610550610f46565b60405161055d919061275f565b60405180910390f35b34801561057257600080fd5b5061057b610f4b565b60405161058891906124fa565b60405180910390f35b34801561059d57600080fd5b506105a6610f50565b6040516105b391906124fa565b60405180910390f35b3480156105c857600080fd5b506105e360048036038101906105de91906124be565b610f56565b6040516105f1929190612829565b60405180910390f35b34801561060657600080fd5b5061060f611081565b60405161061c9190612236565b60405180910390f35b34801561063157600080fd5b5061063a6110b1565b60405161064791906124fa565b60405180910390f35b61066a600480360381019061066591906124be565b6112e8565b005b34801561067857600080fd5b50610693600480360381019061068e9190612885565b6117b1565b005b3480156106a157600080fd5b506106aa611834565b6040516106b791906124fa565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461079657337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161078d9291906128b2565b60405180910390fd5b6107a0828261183a565b5050565b6207a12081565b60006107b5611dda565b7f0000000000000000000000000000000000000000000000000000000000000000905090565b6107e3611dda565b60003373ffffffffffffffffffffffffffffffffffffffff1660035460405161080b9061290c565b60006040518083038185875af1925050503d8060008114610848576040519150601f19603f3d011682016040523d82523d6000602084013e61084d565b606091505b5050905080610891576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108889061297e565b60405180910390fd5b50565b600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603610903576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fa90612a10565b60405180910390fd5b655af3107a400034101561094c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094390612aa2565b60405180910390fd5b6001811115610990576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098790612b0e565b60405180910390fd5b610998612117565b3481606001818152505033816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506002548160000181815250508181608001818152505060018160c0019015159081151581525050806006600060025481526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a0820151816005015560c08201518160060160006101000a81548160ff02191690831515021790555060e08201518160060160016101000a81548160ff0219169083151502179055506101008201518160060160026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050343373ffffffffffffffffffffffffffffffffffffffff166002547f0c82908456d66c43e9de63edd66f9faf875c8f3a12f936e162d675ec42c3544460405160405180910390a4600160026000828254610bb29190612b5d565b925050819055505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b655af3107a400081565b60086020528060005260406000206000915090505481565b610c0b611dda565b610c156000611e58565b565b6000600554905090565b600181565b60006064600583610c379190612b91565b610c419190612c02565b9050919050565b60048181548110610c5857600080fd5b906000526020600020016000915090505481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060086000838152602001908152602001600020549050919050565b60076020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900460ff16905082565b610cf8612117565b6006600083815260200190815260200160002060405180610120016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820154815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff161515151581526020016006820160019054906101000a900460ff161515151581526020016006820160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050919050565b60066020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040154908060050154908060060160009054906101000a900460ff16908060060160019054906101000a900460ff16908060060160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905089565b600381565b600581565b60025481565b600060606007600084815260200190815260200160002060000160019054906101000a900460ff16610fbd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb490612c7f565b60405180910390fd5b6000600760008581526020019081526020016000206040518060600160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900460ff161515151581526020016001820180548060200260200160405190810160405280929190818152602001828054801561106257602002820191906000526020600020905b81548152602001906001019080831161104e575b5050505050815250509050806000015181604001519250925050915091565b600061108b611dda565b7f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060036207a12060016040518663ffffffff1660e01b8152600401611159959493929190612c9f565b6020604051808303816000875af1158015611178573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119c9190612d07565b90506040518060600160405280600015158152602001600115158152602001600067ffffffffffffffff8111156111d6576111d56122b1565b5b6040519080825280602002602001820160405280156112045781602001602082028036833780820191505090505b508152506007600083815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff02191690831515021790555060408201518160010190805190602001906112779291906121a9565b509050506004819080600181540180825580915050600190039060005260206000200160009091909190915055806005819055507fcc58b13ad3eab50626c6a6300b1d139cd6ebb1688a7cced9461c2f7e762665ee8160016040516112dd929190612d34565b60405180910390a190565b60006006600083815260200190815260200160002060405180610120016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820154815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff161515151581526020016006820160019054906101000a900460ff161515151581526020016006820160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036114da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114d190612da9565b60405180910390fd5b80606001513414611520576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161151790612e3b565b60405180910390fd5b600115158160c0015115151480156115405750600015158160e001511515145b61157f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157690612ea7565b60405180910390fd5b33816040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505034816060018181516115c99190612b5d565b915081815250506115dd8160800151611f1c565b8160a001818152505060006115f06110b1565b90508160000151600860008381526020019081526020016000208190555081600660008581526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a0820151816005015560c08201518160060160006101000a81548160ff02191690831515021790555060e08201518160060160016101000a81548160ff0219169083151502179055506101008201518160060160026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050343373ffffffffffffffffffffffffffffffffffffffff1683600001517f48bba6a72d4a9fae48e2469ce99518c38afec785fa4f3df38a1a76b03a97953760405160405180910390a4505050565b6117b9611dda565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611828576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161181f90612f39565b60405180910390fd5b61183181611e58565b50565b60055481565b6007600083815260200190815260200160002060000160019054906101000a900460ff1661189d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161189490612c7f565b60405180910390fd5b60016007600084815260200190815260200160002060000160006101000a81548160ff021916908315150217905550806007600084815260200190815260200160002060010190805190602001906118f69291906121a9565b507ffe2e2d779dba245964d4e3ef9b994be63856fd568bf7d3ca9e224755cb1bd54d8282604051611928929190612f59565b60405180910390a160006008600084815260200190815260200160002054905060006006600083815260200190815260200160002060405180610120016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820154815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff161515151581526020016006820160019054906101000a900460ff161515151581526020016006820160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050600083600081518110611ae157611ae0612f89565b5b602002602001015190506000611afb836000015183611f38565b90508083610100019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506000611b458460600151610c26565b90506000818560600151611b599190612fb8565b905060018560e001901515908115158152505084600660008881526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a0820151816005015560c08201518160060160006101000a81548160ff02191690831515021790555060e08201518160060160016101000a81548160ff0219169083151502179055506101008201518160060160026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555090505060008373ffffffffffffffffffffffffffffffffffffffff1682604051611ce79061290c565b60006040518083038185875af1925050503d8060008114611d24576040519150601f19603f3d011682016040523d82523d6000602084013e611d29565b606091505b5050905080611d6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d6490613038565b60405180910390fd5b85606001518473ffffffffffffffffffffffffffffffffffffffff16887ff5d92df6ae1a0b46d0a0c57c2e1da0d75d7591d2804ad086cb1e27ba67de7aaf60405160405180910390a48260036000828254611dc89190612b5d565b92505081905550505050505050505050565b611de26120f9565b73ffffffffffffffffffffffffffffffffffffffff16611e00610c6c565b73ffffffffffffffffffffffffffffffffffffffff1614611e56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e4d906130a4565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808203611f2e5760019050611f33565b600090505b919050565b6000806006600085815260200190815260200160002060405180610120016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820154815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff161515151581526020016006820160019054906101000a900460ff161515151581526020016006820160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905060006120c784612101565b90506000826080015190508082036120e857826020015193505050506120f3565b826040015193505050505b92915050565b600033905090565b600060028261211091906130c4565b9050919050565b60405180610120016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600015158152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b8280548282559060005260206000209081019282156121e5579160200282015b828111156121e45782518255916020019190600101906121c9565b5b5090506121f291906121f6565b5090565b5b8082111561220f5760008160009055506001016121f7565b5090565b600067ffffffffffffffff82169050919050565b61223081612213565b82525050565b600060208201905061224b6000830184612227565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61227881612265565b811461228357600080fd5b50565b6000813590506122958161226f565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6122e9826122a0565b810181811067ffffffffffffffff82111715612308576123076122b1565b5b80604052505050565b600061231b612251565b905061232782826122e0565b919050565b600067ffffffffffffffff821115612347576123466122b1565b5b602082029050602081019050919050565b600080fd5b600061237061236b8461232c565b612311565b9050808382526020820190506020840283018581111561239357612392612358565b5b835b818110156123bc57806123a88882612286565b845260208401935050602081019050612395565b5050509392505050565b600082601f8301126123db576123da61229b565b5b81356123eb84826020860161235d565b91505092915050565b6000806040838503121561240b5761240a61225b565b5b600061241985828601612286565b925050602083013567ffffffffffffffff81111561243a57612439612260565b5b612446858286016123c6565b9150509250929050565b600063ffffffff82169050919050565b61246981612450565b82525050565b60006020820190506124846000830184612460565b92915050565b6000819050919050565b61249d8161248a565b82525050565b60006020820190506124b86000830184612494565b92915050565b6000602082840312156124d4576124d361225b565b5b60006124e284828501612286565b91505092915050565b6124f481612265565b82525050565b600060208201905061250f60008301846124eb565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061254082612515565b9050919050565b61255081612535565b82525050565b600060208201905061256b6000830184612547565b92915050565b60008115159050919050565b61258681612571565b82525050565b60006040820190506125a1600083018561257d565b6125ae602083018461257d565b9392505050565b6125be81612265565b82525050565b6125cd81612535565b82525050565b6125dc81612571565b82525050565b610120820160008201516125f960008501826125b5565b50602082015161260c60208501826125c4565b50604082015161261f60408501826125c4565b50606082015161263260608501826125b5565b50608082015161264560808501826125b5565b5060a082015161265860a08501826125b5565b5060c082015161266b60c08501826125d3565b5060e082015161267e60e08501826125d3565b506101008201516126936101008501826125c4565b50505050565b6000610120820190506126af60008301846125e2565b92915050565b6000610120820190506126cb600083018c6124eb565b6126d8602083018b612547565b6126e5604083018a612547565b6126f260608301896124eb565b6126ff60808301886124eb565b61270c60a08301876124eb565b61271960c083018661257d565b61272660e083018561257d565b612734610100830184612547565b9a9950505050505050505050565b600061ffff82169050919050565b61275981612742565b82525050565b60006020820190506127746000830184612750565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006127b283836125b5565b60208301905092915050565b6000602082019050919050565b60006127d68261277a565b6127e08185612785565b93506127eb83612796565b8060005b8381101561281c57815161280388826127a6565b975061280e836127be565b9250506001810190506127ef565b5085935050505092915050565b600060408201905061283e600083018561257d565b818103602083015261285081846127cb565b90509392505050565b61286281612535565b811461286d57600080fd5b50565b60008135905061287f81612859565b92915050565b60006020828403121561289b5761289a61225b565b5b60006128a984828501612870565b91505092915050565b60006040820190506128c76000830185612547565b6128d46020830184612547565b9392505050565b600081905092915050565b50565b60006128f66000836128db565b9150612901826128e6565b600082019050919050565b6000612917826128e9565b9150819050919050565b600082825260208201905092915050565b7f524f49207472616e73666572206661696c656400000000000000000000000000600082015250565b6000612968601383612921565b915061297382612932565b602082019050919050565b600060208201905081810360008301526129978161295b565b9050919050565b7f41646472657373207a65726f2063616e206e6f7420637265617465206120676160008201527f6d65210000000000000000000000000000000000000000000000000000000000602082015250565b60006129fa602383612921565b9150612a058261299e565b604082019050919050565b60006020820190508181036000830152612a29816129ed565b9050919050565b7f42657420616d6f756e742073686f756c64206265206d6f7265206f722065717560008201527f616c20746f206d696e696d756d2062657420616d6f756e740000000000000000602082015250565b6000612a8c603883612921565b9150612a9782612a30565b604082019050919050565b60006020820190508181036000830152612abb81612a7f565b9050919050565b7f43686f6963652063616e206f6e6c792062652031206f72203000000000000000600082015250565b6000612af8601983612921565b9150612b0382612ac2565b602082019050919050565b60006020820190508181036000830152612b2781612aeb565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612b6882612265565b9150612b7383612265565b9250828201905080821115612b8b57612b8a612b2e565b5b92915050565b6000612b9c82612265565b9150612ba783612265565b9250828202612bb581612265565b91508282048414831517612bcc57612bcb612b2e565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612c0d82612265565b9150612c1883612265565b925082612c2857612c27612bd3565b5b828204905092915050565b7f72657175657374206e6f7420666f756e64000000000000000000000000000000600082015250565b6000612c69601183612921565b9150612c7482612c33565b602082019050919050565b60006020820190508181036000830152612c9881612c5c565b9050919050565b600060a082019050612cb46000830188612494565b612cc16020830187612227565b612cce6040830186612750565b612cdb6060830185612460565b612ce86080830184612460565b9695505050505050565b600081519050612d018161226f565b92915050565b600060208284031215612d1d57612d1c61225b565b5b6000612d2b84828501612cf2565b91505092915050565b6000604082019050612d4960008301856124eb565b612d566020830184612460565b9392505050565b7f496e76616c696420616464726573732100000000000000000000000000000000600082015250565b6000612d93601083612921565b9150612d9e82612d5d565b602082019050919050565b60006020820190508181036000830152612dc281612d86565b9050919050565b7f4e6565642073616d6520616d6f756e7420746f206a6f696e207468652067616d60008201527f6521000000000000000000000000000000000000000000000000000000000000602082015250565b6000612e25602283612921565b9150612e3082612dc9565b604082019050919050565b60006020820190508181036000830152612e5481612e18565b9050919050565b7f43616e6e6f74206a6f696e207468652067616d65210000000000000000000000600082015250565b6000612e91601583612921565b9150612e9c82612e5b565b602082019050919050565b60006020820190508181036000830152612ec081612e84565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612f23602683612921565b9150612f2e82612ec7565b604082019050919050565b60006020820190508181036000830152612f5281612f16565b9050919050565b6000604082019050612f6e60008301856124eb565b8181036020830152612f8081846127cb565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000612fc382612265565b9150612fce83612265565b9250828203905081811115612fe657612fe5612b2e565b5b92915050565b7f57696e6e6572207072697a65207472616e73666572206973206661696c656400600082015250565b6000613022601f83612921565b915061302d82612fec565b602082019050919050565b6000602082019050818103600083015261305181613015565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061308e602083612921565b915061309982613058565b602082019050919050565b600060208201905081810360008301526130bd81613081565b9050919050565b60006130cf82612265565b91506130da83612265565b9250826130ea576130e9612bd3565b5b82820690509291505056fea2646970667358221220d915d485670609fd7f753e429af72f50921f61e521daea62fb4bc4f51937434664736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106101b75760003560e01c80638da5cb5b116100ec578063d7c81b551161008a578063e0c8628911610064578063e0c8628914610625578063efaa55a014610650578063f2fde38b1461066c578063fc2a88c314610695576101b7565b8063d7c81b5514610591578063d8a4676f146105bc578063de3d9fb7146105fa576101b7565b8063a2f77bcc116100c6578063a2f77bcc146104b9578063ae945847146104f6578063b0fb162f1461053b578063d5c4315914610566576101b7565b80638da5cb5b146104135780639a0c24bd1461043e578063a168fa891461047b576101b7565b80636540742f11610159578063778b14c711610133578063778b14c7146103435780637ccfd7fc1461036e578063876e3466146103995780638796ba8c146103d6576101b7565b80636540742f146102c45780636d653a1c146102ef578063715018a61461032c576101b7565b8063331bf12511610195578063331bf1251461023b5780633ccfd60b1461026657806348e837b91461027d57806361728f3914610299576101b7565b806309c1ba2e146101bc5780631fe543e3146101e757806324f7469714610210575b600080fd5b3480156101c857600080fd5b506101d16106c0565b6040516101de9190612236565b60405180910390f35b3480156101f357600080fd5b5061020e600480360381019061020991906123f4565b6106e4565b005b34801561021c57600080fd5b506102256107a4565b604051610232919061246f565b60405180910390f35b34801561024757600080fd5b506102506107ab565b60405161025d91906124a3565b60405180910390f35b34801561027257600080fd5b5061027b6107db565b005b610297600480360381019061029291906124be565b610894565b005b3480156102a557600080fd5b506102ae610bbd565b6040516102bb91906124a3565b60405180910390f35b3480156102d057600080fd5b506102d9610be1565b6040516102e691906124fa565b60405180910390f35b3480156102fb57600080fd5b50610316600480360381019061031191906124be565b610beb565b60405161032391906124fa565b60405180910390f35b34801561033857600080fd5b50610341610c03565b005b34801561034f57600080fd5b50610358610c17565b60405161036591906124fa565b60405180910390f35b34801561037a57600080fd5b50610383610c21565b604051610390919061246f565b60405180910390f35b3480156103a557600080fd5b506103c060048036038101906103bb91906124be565b610c26565b6040516103cd91906124fa565b60405180910390f35b3480156103e257600080fd5b506103fd60048036038101906103f891906124be565b610c48565b60405161040a91906124fa565b60405180910390f35b34801561041f57600080fd5b50610428610c6c565b6040516104359190612556565b60405180910390f35b34801561044a57600080fd5b50610465600480360381019061046091906124be565b610c95565b60405161047291906124fa565b60405180910390f35b34801561048757600080fd5b506104a2600480360381019061049d91906124be565b610cb2565b6040516104b092919061258c565b60405180910390f35b3480156104c557600080fd5b506104e060048036038101906104db91906124be565b610cf0565b6040516104ed9190612699565b60405180910390f35b34801561050257600080fd5b5061051d600480360381019061051891906124be565b610e7e565b604051610532999897969594939291906126b5565b60405180910390f35b34801561054757600080fd5b50610550610f46565b60405161055d919061275f565b60405180910390f35b34801561057257600080fd5b5061057b610f4b565b60405161058891906124fa565b60405180910390f35b34801561059d57600080fd5b506105a6610f50565b6040516105b391906124fa565b60405180910390f35b3480156105c857600080fd5b506105e360048036038101906105de91906124be565b610f56565b6040516105f1929190612829565b60405180910390f35b34801561060657600080fd5b5061060f611081565b60405161061c9190612236565b60405180910390f35b34801561063157600080fd5b5061063a6110b1565b60405161064791906124fa565b60405180910390f35b61066a600480360381019061066591906124be565b6112e8565b005b34801561067857600080fd5b50610693600480360381019061068e9190612885565b6117b1565b005b3480156106a157600080fd5b506106aa611834565b6040516106b791906124fa565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461079657337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161078d9291906128b2565b60405180910390fd5b6107a0828261183a565b5050565b6207a12081565b60006107b5611dda565b7f0000000000000000000000000000000000000000000000000000000000000000905090565b6107e3611dda565b60003373ffffffffffffffffffffffffffffffffffffffff1660035460405161080b9061290c565b60006040518083038185875af1925050503d8060008114610848576040519150601f19603f3d011682016040523d82523d6000602084013e61084d565b606091505b5050905080610891576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108889061297e565b60405180910390fd5b50565b600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603610903576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fa90612a10565b60405180910390fd5b655af3107a400034101561094c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094390612aa2565b60405180910390fd5b6001811115610990576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098790612b0e565b60405180910390fd5b610998612117565b3481606001818152505033816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506002548160000181815250508181608001818152505060018160c0019015159081151581525050806006600060025481526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a0820151816005015560c08201518160060160006101000a81548160ff02191690831515021790555060e08201518160060160016101000a81548160ff0219169083151502179055506101008201518160060160026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050343373ffffffffffffffffffffffffffffffffffffffff166002547f0c82908456d66c43e9de63edd66f9faf875c8f3a12f936e162d675ec42c3544460405160405180910390a4600160026000828254610bb29190612b5d565b925050819055505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b655af3107a400081565b60086020528060005260406000206000915090505481565b610c0b611dda565b610c156000611e58565b565b6000600554905090565b600181565b60006064600583610c379190612b91565b610c419190612c02565b9050919050565b60048181548110610c5857600080fd5b906000526020600020016000915090505481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060086000838152602001908152602001600020549050919050565b60076020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900460ff16905082565b610cf8612117565b6006600083815260200190815260200160002060405180610120016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820154815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff161515151581526020016006820160019054906101000a900460ff161515151581526020016006820160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050919050565b60066020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040154908060050154908060060160009054906101000a900460ff16908060060160019054906101000a900460ff16908060060160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905089565b600381565b600581565b60025481565b600060606007600084815260200190815260200160002060000160019054906101000a900460ff16610fbd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb490612c7f565b60405180910390fd5b6000600760008581526020019081526020016000206040518060600160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900460ff161515151581526020016001820180548060200260200160405190810160405280929190818152602001828054801561106257602002820191906000526020600020905b81548152602001906001019080831161104e575b5050505050815250509050806000015181604001519250925050915091565b600061108b611dda565b7f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060036207a12060016040518663ffffffff1660e01b8152600401611159959493929190612c9f565b6020604051808303816000875af1158015611178573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119c9190612d07565b90506040518060600160405280600015158152602001600115158152602001600067ffffffffffffffff8111156111d6576111d56122b1565b5b6040519080825280602002602001820160405280156112045781602001602082028036833780820191505090505b508152506007600083815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff02191690831515021790555060408201518160010190805190602001906112779291906121a9565b509050506004819080600181540180825580915050600190039060005260206000200160009091909190915055806005819055507fcc58b13ad3eab50626c6a6300b1d139cd6ebb1688a7cced9461c2f7e762665ee8160016040516112dd929190612d34565b60405180910390a190565b60006006600083815260200190815260200160002060405180610120016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820154815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff161515151581526020016006820160019054906101000a900460ff161515151581526020016006820160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036114da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114d190612da9565b60405180910390fd5b80606001513414611520576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161151790612e3b565b60405180910390fd5b600115158160c0015115151480156115405750600015158160e001511515145b61157f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157690612ea7565b60405180910390fd5b33816040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505034816060018181516115c99190612b5d565b915081815250506115dd8160800151611f1c565b8160a001818152505060006115f06110b1565b90508160000151600860008381526020019081526020016000208190555081600660008581526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a0820151816005015560c08201518160060160006101000a81548160ff02191690831515021790555060e08201518160060160016101000a81548160ff0219169083151502179055506101008201518160060160026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050343373ffffffffffffffffffffffffffffffffffffffff1683600001517f48bba6a72d4a9fae48e2469ce99518c38afec785fa4f3df38a1a76b03a97953760405160405180910390a4505050565b6117b9611dda565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611828576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161181f90612f39565b60405180910390fd5b61183181611e58565b50565b60055481565b6007600083815260200190815260200160002060000160019054906101000a900460ff1661189d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161189490612c7f565b60405180910390fd5b60016007600084815260200190815260200160002060000160006101000a81548160ff021916908315150217905550806007600084815260200190815260200160002060010190805190602001906118f69291906121a9565b507ffe2e2d779dba245964d4e3ef9b994be63856fd568bf7d3ca9e224755cb1bd54d8282604051611928929190612f59565b60405180910390a160006008600084815260200190815260200160002054905060006006600083815260200190815260200160002060405180610120016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820154815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff161515151581526020016006820160019054906101000a900460ff161515151581526020016006820160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050600083600081518110611ae157611ae0612f89565b5b602002602001015190506000611afb836000015183611f38565b90508083610100019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506000611b458460600151610c26565b90506000818560600151611b599190612fb8565b905060018560e001901515908115158152505084600660008881526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a0820151816005015560c08201518160060160006101000a81548160ff02191690831515021790555060e08201518160060160016101000a81548160ff0219169083151502179055506101008201518160060160026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555090505060008373ffffffffffffffffffffffffffffffffffffffff1682604051611ce79061290c565b60006040518083038185875af1925050503d8060008114611d24576040519150601f19603f3d011682016040523d82523d6000602084013e611d29565b606091505b5050905080611d6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d6490613038565b60405180910390fd5b85606001518473ffffffffffffffffffffffffffffffffffffffff16887ff5d92df6ae1a0b46d0a0c57c2e1da0d75d7591d2804ad086cb1e27ba67de7aaf60405160405180910390a48260036000828254611dc89190612b5d565b92505081905550505050505050505050565b611de26120f9565b73ffffffffffffffffffffffffffffffffffffffff16611e00610c6c565b73ffffffffffffffffffffffffffffffffffffffff1614611e56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e4d906130a4565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808203611f2e5760019050611f33565b600090505b919050565b6000806006600085815260200190815260200160002060405180610120016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820154815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff161515151581526020016006820160019054906101000a900460ff161515151581526020016006820160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905060006120c784612101565b90506000826080015190508082036120e857826020015193505050506120f3565b826040015193505050505b92915050565b600033905090565b600060028261211091906130c4565b9050919050565b60405180610120016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600015158152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b8280548282559060005260206000209081019282156121e5579160200282015b828111156121e45782518255916020019190600101906121c9565b5b5090506121f291906121f6565b5090565b5b8082111561220f5760008160009055506001016121f7565b5090565b600067ffffffffffffffff82169050919050565b61223081612213565b82525050565b600060208201905061224b6000830184612227565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61227881612265565b811461228357600080fd5b50565b6000813590506122958161226f565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6122e9826122a0565b810181811067ffffffffffffffff82111715612308576123076122b1565b5b80604052505050565b600061231b612251565b905061232782826122e0565b919050565b600067ffffffffffffffff821115612347576123466122b1565b5b602082029050602081019050919050565b600080fd5b600061237061236b8461232c565b612311565b9050808382526020820190506020840283018581111561239357612392612358565b5b835b818110156123bc57806123a88882612286565b845260208401935050602081019050612395565b5050509392505050565b600082601f8301126123db576123da61229b565b5b81356123eb84826020860161235d565b91505092915050565b6000806040838503121561240b5761240a61225b565b5b600061241985828601612286565b925050602083013567ffffffffffffffff81111561243a57612439612260565b5b612446858286016123c6565b9150509250929050565b600063ffffffff82169050919050565b61246981612450565b82525050565b60006020820190506124846000830184612460565b92915050565b6000819050919050565b61249d8161248a565b82525050565b60006020820190506124b86000830184612494565b92915050565b6000602082840312156124d4576124d361225b565b5b60006124e284828501612286565b91505092915050565b6124f481612265565b82525050565b600060208201905061250f60008301846124eb565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061254082612515565b9050919050565b61255081612535565b82525050565b600060208201905061256b6000830184612547565b92915050565b60008115159050919050565b61258681612571565b82525050565b60006040820190506125a1600083018561257d565b6125ae602083018461257d565b9392505050565b6125be81612265565b82525050565b6125cd81612535565b82525050565b6125dc81612571565b82525050565b610120820160008201516125f960008501826125b5565b50602082015161260c60208501826125c4565b50604082015161261f60408501826125c4565b50606082015161263260608501826125b5565b50608082015161264560808501826125b5565b5060a082015161265860a08501826125b5565b5060c082015161266b60c08501826125d3565b5060e082015161267e60e08501826125d3565b506101008201516126936101008501826125c4565b50505050565b6000610120820190506126af60008301846125e2565b92915050565b6000610120820190506126cb600083018c6124eb565b6126d8602083018b612547565b6126e5604083018a612547565b6126f260608301896124eb565b6126ff60808301886124eb565b61270c60a08301876124eb565b61271960c083018661257d565b61272660e083018561257d565b612734610100830184612547565b9a9950505050505050505050565b600061ffff82169050919050565b61275981612742565b82525050565b60006020820190506127746000830184612750565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006127b283836125b5565b60208301905092915050565b6000602082019050919050565b60006127d68261277a565b6127e08185612785565b93506127eb83612796565b8060005b8381101561281c57815161280388826127a6565b975061280e836127be565b9250506001810190506127ef565b5085935050505092915050565b600060408201905061283e600083018561257d565b818103602083015261285081846127cb565b90509392505050565b61286281612535565b811461286d57600080fd5b50565b60008135905061287f81612859565b92915050565b60006020828403121561289b5761289a61225b565b5b60006128a984828501612870565b91505092915050565b60006040820190506128c76000830185612547565b6128d46020830184612547565b9392505050565b600081905092915050565b50565b60006128f66000836128db565b9150612901826128e6565b600082019050919050565b6000612917826128e9565b9150819050919050565b600082825260208201905092915050565b7f524f49207472616e73666572206661696c656400000000000000000000000000600082015250565b6000612968601383612921565b915061297382612932565b602082019050919050565b600060208201905081810360008301526129978161295b565b9050919050565b7f41646472657373207a65726f2063616e206e6f7420637265617465206120676160008201527f6d65210000000000000000000000000000000000000000000000000000000000602082015250565b60006129fa602383612921565b9150612a058261299e565b604082019050919050565b60006020820190508181036000830152612a29816129ed565b9050919050565b7f42657420616d6f756e742073686f756c64206265206d6f7265206f722065717560008201527f616c20746f206d696e696d756d2062657420616d6f756e740000000000000000602082015250565b6000612a8c603883612921565b9150612a9782612a30565b604082019050919050565b60006020820190508181036000830152612abb81612a7f565b9050919050565b7f43686f6963652063616e206f6e6c792062652031206f72203000000000000000600082015250565b6000612af8601983612921565b9150612b0382612ac2565b602082019050919050565b60006020820190508181036000830152612b2781612aeb565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612b6882612265565b9150612b7383612265565b9250828201905080821115612b8b57612b8a612b2e565b5b92915050565b6000612b9c82612265565b9150612ba783612265565b9250828202612bb581612265565b91508282048414831517612bcc57612bcb612b2e565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612c0d82612265565b9150612c1883612265565b925082612c2857612c27612bd3565b5b828204905092915050565b7f72657175657374206e6f7420666f756e64000000000000000000000000000000600082015250565b6000612c69601183612921565b9150612c7482612c33565b602082019050919050565b60006020820190508181036000830152612c9881612c5c565b9050919050565b600060a082019050612cb46000830188612494565b612cc16020830187612227565b612cce6040830186612750565b612cdb6060830185612460565b612ce86080830184612460565b9695505050505050565b600081519050612d018161226f565b92915050565b600060208284031215612d1d57612d1c61225b565b5b6000612d2b84828501612cf2565b91505092915050565b6000604082019050612d4960008301856124eb565b612d566020830184612460565b9392505050565b7f496e76616c696420616464726573732100000000000000000000000000000000600082015250565b6000612d93601083612921565b9150612d9e82612d5d565b602082019050919050565b60006020820190508181036000830152612dc281612d86565b9050919050565b7f4e6565642073616d6520616d6f756e7420746f206a6f696e207468652067616d60008201527f6521000000000000000000000000000000000000000000000000000000000000602082015250565b6000612e25602283612921565b9150612e3082612dc9565b604082019050919050565b60006020820190508181036000830152612e5481612e18565b9050919050565b7f43616e6e6f74206a6f696e207468652067616d65210000000000000000000000600082015250565b6000612e91601583612921565b9150612e9c82612e5b565b602082019050919050565b60006020820190508181036000830152612ec081612e84565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612f23602683612921565b9150612f2e82612ec7565b604082019050919050565b60006020820190508181036000830152612f5281612f16565b9050919050565b6000604082019050612f6e60008301856124eb565b8181036020830152612f8081846127cb565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000612fc382612265565b9150612fce83612265565b9250828203905081811115612fe657612fe5612b2e565b5b92915050565b7f57696e6e6572207072697a65207472616e73666572206973206661696c656400600082015250565b6000613022601f83612921565b915061302d82612fec565b602082019050919050565b6000602082019050818103600083015261305181613015565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061308e602083612921565b915061309982613058565b602082019050919050565b600060208201905081810360008301526130bd81613081565b9050919050565b60006130cf82612265565b91506130da83612265565b9250826130ea576130e9612bd3565b5b82820690509291505056fea2646970667358221220d915d485670609fd7f753e429af72f50921f61e521daea62fb4bc4f51937434664736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "gamesRequests(uint256)": {
        "notice": "This is a mapping to track requests for a random numberto games Ids"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 161,
        "contract": "contracts/CoinFlip.sol:CoinFlip",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 277,
        "contract": "contracts/CoinFlip.sol:CoinFlip",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 371,
        "contract": "contracts/CoinFlip.sol:CoinFlip",
        "label": "gameId",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 376,
        "contract": "contracts/CoinFlip.sol:CoinFlip",
        "label": "roiBalance",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 395,
        "contract": "contracts/CoinFlip.sol:CoinFlip",
        "label": "requestIds",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 397,
        "contract": "contracts/CoinFlip.sol:CoinFlip",
        "label": "lastRequestId",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 429,
        "contract": "contracts/CoinFlip.sol:CoinFlip",
        "label": "createdGames",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(Game)416_storage)"
      },
      {
        "astId": 434,
        "contract": "contracts/CoinFlip.sol:CoinFlip",
        "label": "s_requests",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(RequestStatus)424_storage)"
      },
      {
        "astId": 439,
        "contract": "contracts/CoinFlip.sol:CoinFlip",
        "label": "gamesRequests",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(Game)416_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CoinFlip.Game)",
        "numberOfBytes": "32",
        "value": "t_struct(Game)416_storage"
      },
      "t_mapping(t_uint256,t_struct(RequestStatus)424_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CoinFlip.RequestStatus)",
        "numberOfBytes": "32",
        "value": "t_struct(RequestStatus)424_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Game)416_storage": {
        "encoding": "inplace",
        "label": "struct CoinFlip.Game",
        "members": [
          {
            "astId": 399,
            "contract": "contracts/CoinFlip.sol:CoinFlip",
            "label": "gameId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 401,
            "contract": "contracts/CoinFlip.sol:CoinFlip",
            "label": "player1",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 403,
            "contract": "contracts/CoinFlip.sol:CoinFlip",
            "label": "player2",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 405,
            "contract": "contracts/CoinFlip.sol:CoinFlip",
            "label": "betAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 407,
            "contract": "contracts/CoinFlip.sol:CoinFlip",
            "label": "player1Choice",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 409,
            "contract": "contracts/CoinFlip.sol:CoinFlip",
            "label": "player2Choice",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 411,
            "contract": "contracts/CoinFlip.sol:CoinFlip",
            "label": "isStarted",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 413,
            "contract": "contracts/CoinFlip.sol:CoinFlip",
            "label": "isFinished",
            "offset": 1,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 415,
            "contract": "contracts/CoinFlip.sol:CoinFlip",
            "label": "winner",
            "offset": 2,
            "slot": "6",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(RequestStatus)424_storage": {
        "encoding": "inplace",
        "label": "struct CoinFlip.RequestStatus",
        "members": [
          {
            "astId": 418,
            "contract": "contracts/CoinFlip.sol:CoinFlip",
            "label": "fulfilled",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 420,
            "contract": "contracts/CoinFlip.sol:CoinFlip",
            "label": "exists",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 423,
            "contract": "contracts/CoinFlip.sol:CoinFlip",
            "label": "randomWords",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}